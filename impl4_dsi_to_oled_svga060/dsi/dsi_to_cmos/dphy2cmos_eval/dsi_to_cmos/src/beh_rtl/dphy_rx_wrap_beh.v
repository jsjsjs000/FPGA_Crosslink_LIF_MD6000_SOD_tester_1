// dphy_rx_wrap_beh.v generated by Lattice IP Model Creator version 1
// created on Fri, Mar 16, 2018  2:28:00 PM
// Copyright(c) 2007 Lattice Semiconductor Corporation. All rights reserved
// obfuscator_exe version 1.mar0807

// top
















































`timescale 1 ns / 100 ps
module jc6c7dc #(	
    parameter DPHY_RX_IP  = "LATTICE",    parameter RX_GEAR =  8,        parameter NUM_RX_LANE = 4,      parameter BYTECLK_MHZ = 111 
)
(
    input wire                reset_n_i,
    input wire                zm1b0ae,       
    input wire                hbd8572,	        
    input wire                xjc2b97,	        
    input wire                co15cbe,	        
    input wire                anae5f0,	        
    input wire [RX_GEAR-1:0]  co97c20,            
    input wire [RX_GEAR-1:0]  mef080d,            
    input wire [RX_GEAR-1:0]  do2034e,            
    input wire [RX_GEAR-1:0]  cbd39b,            
    output wire [RX_GEAR-1:0] bd0_o,            
    output wire [RX_GEAR-1:0] bd1_o,            
    output wire [RX_GEAR-1:0] bd2_o,            
    output wire [RX_GEAR-1:0] bd3_o,            
    output reg                zx5fb4d,    
    output wire               kdfda6f,  
    output wire               kded37d,  
    output wire               by69bed,  
    output wire               dm4df6a,  
    output wire               hs_sync_o         
);
reg                 kq7da9d;
reg                 kded4e9;
reg                 cz6a74d;
reg                 kq53a6c;
reg [RX_GEAR-1:0]   ble9b09, dm4d84e, ho6c273, fn6139b,                    lf9cdf, uv4e6ff, ne737fd, fp9bfeb;
reg [RX_GEAR-1:0]   eaffafb, kdfd7d8, faebec4, pf5f623,                    dmfb11e, hbd88f3, qgc479e, an23cf0;
reg [RX_GEAR-1:0]   blf3c2a, jr9e156, gof0ab6, an855b1,                    ba2ad8c, go56c63, ieb6319, qvb18c9;
reg [RX_GEAR-1:0]   ne6326a, tj19352, ofc9a97, rg4d4bd,                    mr6a5ea, ne52f54, mg97aa3, fcbd519;
reg [RX_GEAR-1:0]   yx54651, wya328d, nt19468, rgca347,                    qt51a3b, gq8d1dc, ay68ee0, vi47700;
reg [RX_GEAR-1:0]   czdc018, goe00c5, qi629, bn3148,                    oh18a47, vic523c, oh291e2, ho48f15;
reg [RX_GEAR-1:0]   cb3c55a, uve2ad4, ym156a5, yzab529,                    hb5a94c, uid4a67, pha5338, mt299c7;
reg [RX_GEAR-1:0]   ay671e1, tj38f08, fnc7847, qv3c23e,                    bye11f4, ep8fa3, ps47d1d, qi3e8ea;
reg [RX_GEAR-1:0]   gqa3a82, sj1d411, eaea08d;
reg [RX_GEAR-1:0]   ks82347, hq11a39, mg8d1ca;
reg [RX_GEAR-1:0]   ps47280, wl39403, xwca01c;
reg [RX_GEAR-1:0]   oh8071f, lf38fc, nt1c7e6;
reg [RX_GEAR/8+1:0] qi1f9bf;
reg [RX_GEAR/8+1:0] pfe6fcf;
reg [RX_GEAR/8+1:0] bnbf3fe;
reg [RX_GEAR/8+1:0] necffbf;
reg                 gb7fdfa, zkfefd4;
reg                 wjf7ea2;
reg                 vxbf514;
reg                 sufa8a7;
reg                 qgd4538,lsa29c1,fc14e0b,xya705a;
reg [3:0]    vx382d2,osc1696,jeb4b0,fn5a583;
wire [7:0]  dzd2c1e, ls960f7, vxb07ba, ls83dd6,                    ls1eeb2, czf7593, vxbac9d, qtd64ee;
wire [RX_GEAR-1:0]  hq93ba3, qi9dd1b, lqee8d8, ld746c3,                    iea361e, do1b0f0, nrd8782, shc3c17;
wire [RX_GEAR-1:0]  cmf05e2, ou82f10, kf17880, oubc405,                    mre2028, ie10144, an80a21, ec510d;
wire [RX_GEAR-1:0]  qt44346, ym21a34, cbd1a0, ui68d04,                    yk46820, ks34100, dba0800, pu4006;
wire                ri20032,aa193, aac98, hd64c1;
localparam  lf3260f   = 1000000/BYTECLK_MHZ;
localparam  ie983fa          = 6*(lf3260f/RX_GEAR);
localparam  kd7f448   = (DPHY_RX_IP  == "MIXEL") ? 0 : ((85000+ie983fa)/lf3260f < 2) ? 1 : (((85000+ie983fa)/lf3260f) -1);
localparam  mt2929e       = 8'hB8;
wire qg494f5, fn4a7a8, ww53d47, jr9ea39;
wire kqf51cf, baa8e78, dm473c2, ep39e13;
reg necf09d;
reg ic784eb;
reg rtc2758;
reg nt13ac7;
reg [RX_GEAR - 1 : 0] jceb1f9;
reg [RX_GEAR - 1 : 0] fnc7e52;
reg [RX_GEAR - 1 : 0] zxf94b3;
reg [RX_GEAR - 1 : 0] vi52cf3;
reg zm9679b;
reg aab3cda;
reg bn9e6d0;
reg [RX_GEAR - 1 : 0] hd9b437;
reg [RX_GEAR - 1 : 0] tud0df2;
reg [RX_GEAR - 1 : 0] rv37c92;
reg [RX_GEAR - 1 : 0] enf24b5;
reg [RX_GEAR - 1 : 0] uk92d68;
reg [RX_GEAR - 1 : 0] vxb5a0b;
reg [RX_GEAR - 1 : 0] os682fb;
reg [RX_GEAR - 1 : 0] ngbecc;
reg [RX_GEAR - 1 : 0] rgfb316;
reg [RX_GEAR - 1 : 0] wjcc59c;
reg [RX_GEAR - 1 : 0] hd16721;
reg [RX_GEAR - 1 : 0] ri9c870;
reg [RX_GEAR - 1 : 0] qi21c13;
reg [RX_GEAR - 1 : 0] al704c3;
reg [RX_GEAR - 1 : 0] rv130e1;
reg [RX_GEAR - 1 : 0] alc3871;
reg [RX_GEAR - 1 : 0] pse1c67;
reg [RX_GEAR - 1 : 0] pf719d3;
reg [RX_GEAR - 1 : 0] ea674fb;
reg [RX_GEAR - 1 : 0] kdd3ec3;
reg [RX_GEAR - 1 : 0] lqfb0ec;
reg [RX_GEAR - 1 : 0] ofc3b1f;
reg [RX_GEAR - 1 : 0] rtec7e4;
reg [RX_GEAR - 1 : 0] ie1f93b;
reg [RX_GEAR - 1 : 0] vie4ecf;
reg [RX_GEAR - 1 : 0] ec3b3d6;
reg [RX_GEAR - 1 : 0] vicf58c;
reg [RX_GEAR - 1 : 0] yxd631c;
reg [RX_GEAR - 1 : 0] hq8c725;
reg [RX_GEAR - 1 : 0] rv1c953;
reg [RX_GEAR - 1 : 0] ng254f2;
reg [RX_GEAR - 1 : 0] go53c9a;
reg [RX_GEAR - 1 : 0] yxf268e;
reg [RX_GEAR - 1 : 0] kf9a3aa;
reg [RX_GEAR - 1 : 0] tj8eaa0;
reg [RX_GEAR - 1 : 0] rvaa834;
reg [RX_GEAR - 1 : 0] lfa0d3d;
reg [RX_GEAR - 1 : 0] ym34f76;
reg [RX_GEAR - 1 : 0] xl3dd8b;
reg [RX_GEAR - 1 : 0] tu762fb;
reg [RX_GEAR - 1 : 0] bn8bedc;
reg [RX_GEAR - 1 : 0] dmfb736;
reg [RX_GEAR - 1 : 0] yxdcd99;
reg [RX_GEAR - 1 : 0] oh36667;
reg [RX_GEAR - 1 : 0] fc999e9;
reg [RX_GEAR - 1 : 0] yk67a55;
reg [RX_GEAR - 1 : 0] jpe954e;
reg [RX_GEAR - 1 : 0] th553be;
reg [RX_GEAR - 1 : 0] ip4efb8;
reg [RX_GEAR - 1 : 0] yzbee20;
reg [RX_GEAR - 1 : 0] lsb8825;
reg [RX_GEAR - 1 : 0] zm20958;
reg [RX_GEAR - 1 : 0] zm25613;
reg [RX_GEAR - 1 : 0] ne584d8;
reg [RX_GEAR - 1 : 0] db1361f;
reg [RX_GEAR - 1 : 0] jpd87f6;
reg [RX_GEAR - 1 : 0] sw1fdbc;
reg [RX_GEAR - 1 : 0] thf6f0a;
reg [RX_GEAR - 1 : 0] ksbc2b2;
reg [RX_GEAR - 1 : 0] ieac83;
reg [RX_GEAR - 1 : 0] hqb20c0;
reg [RX_GEAR - 1 : 0] zm8301d;
reg [RX_GEAR - 1 : 0] byc075d;
reg [RX_GEAR - 1 : 0] mt1d756;
reg [RX_GEAR - 1 : 0] tu5d5ab;
reg [RX_GEAR - 1 : 0] qg56ad9;
reg [RX_GEAR - 1 : 0] anab64e;
reg [RX_GEAR - 1 : 0] ipd93a4;
reg [RX_GEAR - 1 : 0] qt4e92d;
reg [RX_GEAR - 1 : 0] sja4b67;
reg [RX_GEAR - 1 : 0] hd2d9e2;
reg [RX_GEAR - 1 : 0] me678b2;
reg [RX_GEAR - 1 : 0] mre2c8c;
reg [RX_GEAR - 1 : 0] zmb232e;
reg [RX_GEAR - 1 : 0] ls8cb9e;
reg [RX_GEAR - 1 : 0] uk2e79c;
reg [RX_GEAR / 8 + 1 : 0] tj9e702;
reg [RX_GEAR / 8 + 1 : 0] je9c0b6;
reg [RX_GEAR / 8 + 1 : 0] yz2d99;
reg [RX_GEAR / 8 + 1 : 0] mgb6667;
reg ukb3339;
reg hq999c9;
reg shcce4a;
reg ww67255;
reg mt392a8;
reg wjc9544;
reg bl4aa24;
reg pf55126;
reg doa8937;
reg [3 : 0] uv449ba;
reg [3 : 0] ie24dd5;
reg [3 : 0] ep26ea8;
reg [3 : 0] db37545;
reg [7 : 0] dbbaa2f;
reg [7 : 0] byd517e;
reg [7 : 0] vka8bf3;
reg [7 : 0] jp45f9a;
reg [7 : 0] zm2fcd7;
reg [7 : 0] th7e6bb;
reg [7 : 0] fnf35df;
reg [7 : 0] sj9aeff;
reg [RX_GEAR - 1 : 0] ohbbfee;
reg [RX_GEAR - 1 : 0] ayffba3;
reg [RX_GEAR - 1 : 0] neee8c5;
reg [RX_GEAR - 1 : 0] gqa315e;
reg [RX_GEAR - 1 : 0] vic5784;
reg [RX_GEAR - 1 : 0] sh5e111;
reg [RX_GEAR - 1 : 0] fp84461;
reg [RX_GEAR - 1 : 0] xy11876;
reg [RX_GEAR - 1 : 0] rt61d92;
reg [RX_GEAR - 1 : 0] ho764b2;
reg [RX_GEAR - 1 : 0] gq92c9b;
reg [RX_GEAR - 1 : 0] dob26ca;
reg [RX_GEAR - 1 : 0] tj9b29a;
reg [RX_GEAR - 1 : 0] tuca6b5;
reg [RX_GEAR - 1 : 0] qv9ad58;
reg [RX_GEAR - 1 : 0] ntb562d;
reg [RX_GEAR - 1 : 0] vi58b74;
reg [RX_GEAR - 1 : 0] zz2dd13;
reg [RX_GEAR - 1 : 0] rt744f7;
reg [RX_GEAR - 1 : 0] hd13df2;
reg [RX_GEAR - 1 : 0] off7cbf;
reg [RX_GEAR - 1 : 0] uvf2fe5;
reg [RX_GEAR - 1 : 0] fpbf961;
reg [RX_GEAR - 1 : 0] cme5877;
reg ir2c3b8;
reg nr61dc5;
reg riee2e;
reg kq77172;
reg fcb8b91;
reg vic5c8b;
reg qi2e45b;
reg su722d8;
reg tj916c1;
reg lf8b60f;
reg uv5b07f;
reg thd83fc;
reg [2047:0] mec1fe7;
wire [147:0] wyff39;

localparam al7f9c8 = 148,fnfce44 = 32'hfdffc68b;
localparam [31:0] wje7227 = fnfce44;
localparam xjc89e4 = fnfce44 & 4'hf;
localparam [11:0] zz2793d = 'h7ff;
wire [(1 << xjc89e4) -1:0] pse4f7d;
reg [al7f9c8-1:0] rv3df57;
reg [xjc89e4-1:0] qg7d5f9 [0:1];
reg [xjc89e4-1:0] zk57e41;
reg hdbf20b;
integer nrf905f;
integer fnc82fe;





generate    if (RX_GEAR==8) begin                        always @(posedge zm1b0ae or negedge reset_n_i)        begin            if (~reset_n_i)            begin                kq7da9d <= 0;                kded4e9 <= 0;                cz6a74d <= 0;                kq53a6c <= 0;            end            else            begin                kq7da9d <= wjc9544 & ~(tj9e702==0  & ~necf09d);                kded4e9 <= bl4aa24 & ~(je9c0b6==0 & ~ic784eb);                cz6a74d <= pf55126 & ~(yz2d99==0 & ~rtc2758);                kq53a6c <= doa8937 & ~(mgb6667==0 & ~nt13ac7);            end        end
        assign ri20032 = kq7da9d;        assign aa193 = zm9679b;        assign aac98 = aab3cda;        assign hd64c1 = bn9e6d0;    end    else if (RX_GEAR==16) begin        assign ri20032 = wjc9544 & ~(tj9e702==0 & ~necf09d);        assign aa193 = bl4aa24 & ~(je9c0b6==0 & ~ic784eb);        assign aac98 = pf55126 & ~(yz2d99==0 & ~rtc2758);        assign hd64c1 = doa8937 & ~(mgb6667==0 & ~nt13ac7);	always @(posedge zm1b0ae or negedge reset_n_i)        begin            if (~reset_n_i)            begin                kq7da9d <= 0;                kded4e9 <= 0;                cz6a74d <= 0;                kq53a6c <= 0;            end            else            begin                kq7da9d <= ir2c3b8;                kded4e9 <= nr61dc5;                cz6a74d <= riee2e;                kq53a6c <= kq77172;            end        end    end
endgenerate



always @(posedge zm1b0ae or negedge reset_n_i)
begin    if (~reset_n_i)    begin        qgd4538 <= 0;    end    else if (uv449ba == 0)    begin        qgd4538 <= necf09d;    end
end
always @(posedge zm1b0ae or negedge reset_n_i)
begin    if (~reset_n_i)    begin        vx382d2 <= kd7f448;    end        else if (!necf09d)    begin        vx382d2 <= kd7f448;    end    else if (uv449ba == 0)    begin        vx382d2 <= 0;    end    else if (necf09d)    begin        vx382d2 <= uv449ba - 1;    end
end

always @(posedge zm1b0ae or negedge reset_n_i)
begin    if (~reset_n_i)    begin        lsa29c1 <= 0;    end    else if (ie24dd5 == 0)    begin        lsa29c1 <= ic784eb;    end
end
always @(posedge zm1b0ae or negedge reset_n_i)
begin    if (~reset_n_i)    begin        osc1696 <= kd7f448;    end        else if (!ic784eb)    begin        osc1696 <= kd7f448;    end    else if (ie24dd5 == 0)    begin        osc1696 <= 0;    end    else if (ic784eb)    begin        osc1696 <= ie24dd5 - 1;    end
end

always @(posedge zm1b0ae or negedge reset_n_i)
begin    if (~reset_n_i)    begin        fc14e0b <= 0;    end    else if (ep26ea8 == 0)    begin        fc14e0b <= rtc2758;    end
end
always @(posedge zm1b0ae or negedge reset_n_i)
begin    if (~reset_n_i)    begin        jeb4b0 <= kd7f448;    end        else if (!rtc2758)    begin        jeb4b0 <= kd7f448;    end    else if (ep26ea8 == 0)    begin        jeb4b0 <= 0;    end    else if (rtc2758)    begin        jeb4b0 <= ep26ea8 - 1;    end
end

always @(posedge zm1b0ae or negedge reset_n_i)
begin    if (~reset_n_i)    begin        xya705a <= 0;    end    else if (db37545 == 0)    begin        xya705a <= nt13ac7;    end
end
always @(posedge zm1b0ae or negedge reset_n_i)
begin    if (~reset_n_i)    begin        fn5a583 <= kd7f448;    end        else if (!nt13ac7)    begin        fn5a583 <= kd7f448;    end    else if (db37545 == 0)    begin        fn5a583 <= 0;    end    else if (nt13ac7)    begin        fn5a583 <= db37545 - 1;    end
end

generate

        assign    bd0_o = anab64e;        if (NUM_RX_LANE > 1)            assign    bd1_o = sja4b67;        if (NUM_RX_LANE > 2)            assign    bd2_o = mre2c8c;        if (NUM_RX_LANE == 4)            assign    bd3_o = uk2e79c;




























  if (NUM_RX_LANE == 1)    always @(posedge zm1b0ae or negedge reset_n_i)    begin       if (~reset_n_i) begin            zkfefd4 <= 1'b0;       end       else if (!kq7da9d) begin            zkfefd4 <= 1'b0;       end       else begin            zkfefd4 <= ukb3339;       end    end  else if (NUM_RX_LANE == 2)    always @(posedge zm1b0ae or negedge reset_n_i)    begin       if (~reset_n_i) begin         zkfefd4 <= 1'b0;       end       else begin         if (!kq7da9d & !zm9679b )            zkfefd4 <= 1'b0;         else if (ukb3339 & shcce4a)            zkfefd4 <= 1'b1;       end    end  else if (NUM_RX_LANE == 3)    always @(posedge zm1b0ae or negedge reset_n_i)    begin       if (~reset_n_i) begin            zkfefd4 <= 1'b0;       end       else if (!kq7da9d & !zm9679b & !aab3cda) begin            zkfefd4 <= 1'b0;       end       else if (ukb3339 & shcce4a & ww67255) begin            zkfefd4 <= 1'b1;       end    end  else    always @(posedge zm1b0ae or negedge reset_n_i)    begin       if (~reset_n_i) begin            zkfefd4 <= 1'b0;       end       else if (!kq7da9d & !zm9679b & !aab3cda & !bn9e6d0 ) begin            zkfefd4 <= 1'b0;       end       else if (ukb3339 & shcce4a & ww67255 & mt392a8) begin            zkfefd4 <= 1'b1;       end    end
endgenerate
always @(posedge zm1b0ae or negedge reset_n_i)
begin   if (~reset_n_i) begin        zx5fb4d  <= 0;   end   else if (!ukb3339) begin        zx5fb4d <= 1'b0;   end   else if (tj9e702 != je9c0b6) begin        zx5fb4d <= 1'b1;   end   else if (tj9e702 != yz2d99) begin        zx5fb4d <= 1'b1;  end   else if (tj9e702 != mgb6667) begin        zx5fb4d <= 1'b1;    end
end

assign  hs_sync_o = hq999c9;  

assign  kdfda6f = ukb3339;
assign  kded37d = shcce4a;
assign  by69bed = ww67255;
assign  dm4df6a = mt392a8;
generate    if (RX_GEAR == 8)    begin        assign    dzd2c1e = jceb1f9;        assign    ls960f7 = {jceb1f9[RX_GEAR-2:0], tu5d5ab[RX_GEAR-1]};        assign    vxb07ba = {jceb1f9[RX_GEAR-3:0], tu5d5ab[RX_GEAR-1:RX_GEAR-2]};        assign    ls83dd6 = {jceb1f9[RX_GEAR-4:0], tu5d5ab[RX_GEAR-1:RX_GEAR-3]};        assign    ls1eeb2 = {jceb1f9[RX_GEAR-5:0], tu5d5ab[RX_GEAR-1:RX_GEAR-4]};        assign    czf7593 = {jceb1f9[RX_GEAR-6:0], tu5d5ab[RX_GEAR-1:RX_GEAR-5]};        assign    vxbac9d = {jceb1f9[RX_GEAR-7:0], tu5d5ab[RX_GEAR-1:RX_GEAR-6]};        assign    qtd64ee = {jceb1f9[RX_GEAR-8:0], tu5d5ab[RX_GEAR-1:RX_GEAR-7]};    end



















endgenerate
generate    if (NUM_RX_LANE > 1)    begin        assign    hq93ba3 = fnc7e52;        assign    qi9dd1b = {fnc7e52[RX_GEAR-2:0], ipd93a4[RX_GEAR-1]};        assign    lqee8d8 = {fnc7e52[RX_GEAR-3:0], ipd93a4[RX_GEAR-1:RX_GEAR-2]};        assign    ld746c3 = {fnc7e52[RX_GEAR-4:0], ipd93a4[RX_GEAR-1:RX_GEAR-3]};        assign    iea361e = {fnc7e52[RX_GEAR-5:0], ipd93a4[RX_GEAR-1:RX_GEAR-4]};        assign    do1b0f0 = {fnc7e52[RX_GEAR-6:0], ipd93a4[RX_GEAR-1:RX_GEAR-5]};        assign    nrd8782 = {fnc7e52[RX_GEAR-7:0], ipd93a4[RX_GEAR-1:RX_GEAR-6]};        assign    shc3c17 = {fnc7e52[RX_GEAR-8:0], ipd93a4[RX_GEAR-1:RX_GEAR-7]};










    end    if (NUM_RX_LANE > 2)    begin        assign    cmf05e2 = zxf94b3;        assign    ou82f10 = {zxf94b3[RX_GEAR-2:0], hd2d9e2[RX_GEAR-1]};        assign    kf17880 = {zxf94b3[RX_GEAR-3:0], hd2d9e2[RX_GEAR-1:RX_GEAR-2]};        assign    oubc405 = {zxf94b3[RX_GEAR-4:0], hd2d9e2[RX_GEAR-1:RX_GEAR-3]};        assign    mre2028 = {zxf94b3[RX_GEAR-5:0], hd2d9e2[RX_GEAR-1:RX_GEAR-4]};        assign    ie10144 = {zxf94b3[RX_GEAR-6:0], hd2d9e2[RX_GEAR-1:RX_GEAR-5]};        assign    an80a21 = {zxf94b3[RX_GEAR-7:0], hd2d9e2[RX_GEAR-1:RX_GEAR-6]};        assign    ec510d = {zxf94b3[RX_GEAR-8:0], hd2d9e2[RX_GEAR-1:RX_GEAR-7]};










    end    if (NUM_RX_LANE == 4)    begin        assign    qt44346 = vi52cf3;        assign    ym21a34 = {vi52cf3[RX_GEAR-2:0], zmb232e[RX_GEAR-1]};        assign    cbd1a0 = {vi52cf3[RX_GEAR-3:0], zmb232e[RX_GEAR-1:RX_GEAR-2]};        assign    ui68d04 = {vi52cf3[RX_GEAR-4:0], zmb232e[RX_GEAR-1:RX_GEAR-3]};        assign    yk46820 = {vi52cf3[RX_GEAR-5:0], zmb232e[RX_GEAR-1:RX_GEAR-4]};        assign    ks34100 = {vi52cf3[RX_GEAR-6:0], zmb232e[RX_GEAR-1:RX_GEAR-5]};        assign    dba0800 = {vi52cf3[RX_GEAR-7:0], zmb232e[RX_GEAR-1:RX_GEAR-6]};        assign    pu4006 = {vi52cf3[RX_GEAR-8:0], zmb232e[RX_GEAR-1:RX_GEAR-7]};










    end
endgenerate
always @(posedge zm1b0ae or negedge reset_n_i)
begin    if (~reset_n_i) begin        gqa3a82 <= {RX_GEAR{1'b1}};        sj1d411 <= {RX_GEAR{1'b1}};    end    else begin        gqa3a82 <= jceb1f9;        sj1d411 <= tu5d5ab;    end
end
generate    if (NUM_RX_LANE > 1)        always @(posedge zm1b0ae or negedge reset_n_i)        begin            if (~reset_n_i) begin                ks82347 <= {RX_GEAR{1'b1}};                hq11a39 <= {RX_GEAR{1'b1}};            end            else begin                ks82347 <= fnc7e52;                hq11a39 <= ipd93a4;            end        end    if (NUM_RX_LANE > 2)        always @(posedge zm1b0ae or negedge reset_n_i)        begin            if (~reset_n_i) begin                ps47280 <= {RX_GEAR{1'b1}};                wl39403 <= {RX_GEAR{1'b1}};            end            else begin                ps47280 <= zxf94b3;                wl39403 <= hd2d9e2;            end        end    if (NUM_RX_LANE == 4)        always @(posedge zm1b0ae or negedge reset_n_i)        begin            if (~reset_n_i) begin                oh8071f <= {RX_GEAR{1'b1}};                lf38fc <= {RX_GEAR{1'b1}};            end            else begin                oh8071f <= vi52cf3;                lf38fc <= zmb232e;            end        end
endgenerate

generate  if (DPHY_RX_IP == "LATTICE") begin
    assign qg494f5 = ~wjc9544 | ((tj9e702==0) & ~necf09d);	assign kqf51cf  = ~wjc9544 |  ~necf09d;
    if (NUM_RX_LANE > 1) begin      assign fn4a7a8 = ~bl4aa24 | ((tj9e702==0) & ~ic784eb);  assign baa8e78  = ~bl4aa24 |  ~ic784eb;	end
	if (NUM_RX_LANE > 2) begin      assign ww53d47 = ~pf55126 | ((tj9e702==0) & ~rtc2758);  assign dm473c2  = ~pf55126 |  ~rtc2758;	end
	if (NUM_RX_LANE == 4) begin      assign jr9ea39 = ~doa8937 | ((tj9e702==0) & ~nt13ac7);  assign ep39e13  = ~doa8937 |  ~nt13ac7;	end  end  else begin 
    assign qg494f5 = ~kq7da9d;	assign kqf51cf  = ~kq7da9d;
    if (NUM_RX_LANE > 1) begin      assign fn4a7a8 = ~zm9679b;  assign baa8e78  = ~zm9679b;	end
	if (NUM_RX_LANE > 2) begin      assign ww53d47 = ~aab3cda;  assign dm473c2  = ~aab3cda;	end
	if (NUM_RX_LANE == 4) begin      assign jr9ea39 = ~bn9e6d0;  assign ep39e13  = ~bn9e6d0;	end  end
endgenerate

generate    if (RX_GEAR == 8)        begin        always @(posedge zm1b0ae or negedge reset_n_i)        begin            if (~reset_n_i)            begin                ble9b09 <= {RX_GEAR{1'b1}};                dm4d84e <= {RX_GEAR{1'b1}};                ho6c273 <= {RX_GEAR{1'b1}};                fn6139b <= {RX_GEAR{1'b1}};                lf9cdf <= {RX_GEAR{1'b1}};                uv4e6ff <= {RX_GEAR{1'b1}};                ne737fd <= {RX_GEAR{1'b1}};                fp9bfeb <= {RX_GEAR{1'b1}};                yx54651 <= {RX_GEAR{1'b1}};                wya328d <= {RX_GEAR{1'b1}};                nt19468 <= {RX_GEAR{1'b1}};                rgca347 <= {RX_GEAR{1'b1}};                qt51a3b <= {RX_GEAR{1'b1}};                gq8d1dc <= {RX_GEAR{1'b1}};                ay68ee0 <= {RX_GEAR{1'b1}};                vi47700 <= {RX_GEAR{1'b1}};            end            else            begin                ble9b09 <= dbbaa2f;                dm4d84e <= byd517e;                ho6c273 <= vka8bf3;                fn6139b <= jp45f9a;                lf9cdf <= zm2fcd7;                uv4e6ff <= th7e6bb;                ne737fd <= fnf35df;                fp9bfeb <= sj9aeff;                yx54651 <= hd9b437;                wya328d <= tud0df2;                nt19468 <= rv37c92;                rgca347 <= enf24b5;                qt51a3b <= uk92d68;                gq8d1dc <= vxb5a0b;                ay68ee0 <= os682fb;                vi47700 <= ngbecc;            end        end
        always @(posedge zm1b0ae or negedge reset_n_i)        begin            if (~reset_n_i)            begin                eaea08d <= 0;                gb7fdfa <= 0;	qi1f9bf <= 3'd0;            end            else if (~kq7da9d | ((tj9e702==0) & ~wjc9544))            begin                eaea08d <= 0;                gb7fdfa <= 0;                qi1f9bf <= 3'd0;            end            else if ((~ukb3339 & (hd9b437 == mt2929e)) | (ukb3339 & (tj9e702 == 3'd0)))            begin                eaea08d <= yxf268e;                gb7fdfa <= 1;                qi1f9bf <= 3'd0;            end            else if ((~ukb3339 & (tud0df2 == mt2929e)) | (ukb3339 & (tj9e702 == 3'd1)))            begin                eaea08d <= kf9a3aa;                gb7fdfa <= 1;                qi1f9bf <= 3'd1;            end            else if ((~ukb3339 & (rv37c92 == mt2929e)) | (ukb3339 & (tj9e702 == 3'd2)))            begin                eaea08d <= tj8eaa0;                gb7fdfa <= 1;                qi1f9bf <= 3'd2;            end            else if ((~ukb3339 & (enf24b5 == mt2929e)) | (ukb3339 & (tj9e702 == 3'd3)))            begin                eaea08d <= rvaa834;                gb7fdfa <= 1;                qi1f9bf <= 3'd3;            end            else if ((~ukb3339 & (uk92d68 == mt2929e)) | (ukb3339 & (tj9e702 == 3'd4)))            begin                eaea08d <= lfa0d3d;                gb7fdfa <= 1;                qi1f9bf <= 3'd4;            end            else if ((~ukb3339 & (vxb5a0b == mt2929e)) | (ukb3339 & (tj9e702 == 3'd5)))            begin                eaea08d <= ym34f76;                gb7fdfa <= 1;                qi1f9bf <= 3'd5;            end            else if ((~ukb3339 & (os682fb == mt2929e)) | (ukb3339 & (tj9e702 == 3'd6)))            begin                eaea08d <= xl3dd8b;                gb7fdfa <= 1;                qi1f9bf <= 3'd6;            end            else if ((~ukb3339 & (ngbecc == mt2929e)) | (ukb3339 & (tj9e702 == 3'd7)))            begin                eaea08d <= tu762fb;                gb7fdfa <= 1;                qi1f9bf <= 3'd7;            end




	end        if (NUM_RX_LANE > 1)        begin            always @(posedge zm1b0ae or negedge reset_n_i)            begin                if (~reset_n_i)                begin                    eaffafb <= {RX_GEAR{1'b1}};                    kdfd7d8 <= {RX_GEAR{1'b1}};                    faebec4 <= {RX_GEAR{1'b1}};                    pf5f623 <= {RX_GEAR{1'b1}};                    dmfb11e <= {RX_GEAR{1'b1}};                    hbd88f3 <= {RX_GEAR{1'b1}};                    qgc479e <= {RX_GEAR{1'b1}};                    an23cf0 <= {RX_GEAR{1'b1}};                    czdc018 <= {RX_GEAR{1'b1}};                    goe00c5 <= {RX_GEAR{1'b1}};                    qi629 <= {RX_GEAR{1'b1}};                    bn3148 <= {RX_GEAR{1'b1}};                    oh18a47 <= {RX_GEAR{1'b1}};                    vic523c <= {RX_GEAR{1'b1}};                    oh291e2 <= {RX_GEAR{1'b1}};                    ho48f15 <= {RX_GEAR{1'b1}};                end                else                begin                    eaffafb <= ohbbfee;                    kdfd7d8 <= ayffba3;                    faebec4 <= neee8c5;                    pf5f623 <= gqa315e;                    dmfb11e <= vic5784;                    hbd88f3 <= sh5e111;                    qgc479e <= fp84461;                    an23cf0 <= xy11876;                    czdc018 <= rgfb316;                    goe00c5 <= wjcc59c;                    qi629 <= hd16721;                    bn3148 <= ri9c870;                    oh18a47 <= qi21c13;                    vic523c <= al704c3;                    oh291e2 <= rv130e1;                    ho48f15 <= alc3871;                end            end            always @(posedge zm1b0ae or negedge reset_n_i)            begin                if (~reset_n_i) begin                    mg8d1ca <= 0;                    wjf7ea2 <= 0;                    pfe6fcf <= 3'd0;                end                else if (~zm9679b | ((je9c0b6==0) & ~bl4aa24) ) begin                    mg8d1ca <= 0;                    wjf7ea2 <= 0;                    pfe6fcf <= 3'd0;                end                else if ((~shcce4a & (rgfb316 == mt2929e)) | (shcce4a & (je9c0b6 == 3'd0))) begin                    mg8d1ca <= bn8bedc;                    wjf7ea2 <= 1;                    pfe6fcf <= 3'd0;                end                else if ((~shcce4a & (wjcc59c == mt2929e)) | (shcce4a & (je9c0b6 == 3'd1))) begin                    mg8d1ca <= dmfb736;                    wjf7ea2 <= 1;                    pfe6fcf <= 3'd1;                end                else if ((~shcce4a & (hd16721 == mt2929e)) | (shcce4a & (je9c0b6 == 3'd2))) begin                    mg8d1ca <= yxdcd99;                    wjf7ea2 <= 1;                    pfe6fcf <= 3'd2;                end                else if ((~shcce4a & (ri9c870 == mt2929e)) | (shcce4a & (je9c0b6 == 3'd3))) begin                    mg8d1ca <= oh36667;                    wjf7ea2 <= 1;                    pfe6fcf <= 3'd3;                end                else if ((~shcce4a & (qi21c13 == mt2929e)) | (shcce4a & (je9c0b6 == 3'd4))) begin                    mg8d1ca <= fc999e9;                    wjf7ea2 <= 1;                    pfe6fcf <= 3'd4;                end                else if ((~shcce4a & (al704c3 == mt2929e)) | (shcce4a & (je9c0b6 == 3'd5))) begin                    mg8d1ca <= yk67a55;                    wjf7ea2 <= 1;                    pfe6fcf <= 3'd5;                end                else if ((~shcce4a & (rv130e1 == mt2929e)) | (shcce4a & (je9c0b6 == 3'd6))) begin                    mg8d1ca <= jpe954e;                    wjf7ea2 <= 1;                    pfe6fcf <= 3'd6;                end                else if ((~shcce4a & (alc3871 == mt2929e)) | (shcce4a & (je9c0b6 == 3'd7))) begin                    mg8d1ca <= th553be;                    wjf7ea2 <= 1;                    pfe6fcf <= 3'd7;                end

            end        end        if (NUM_RX_LANE > 2)        begin            always @(posedge zm1b0ae or negedge reset_n_i)            begin                if (~reset_n_i)                begin                    blf3c2a <= {RX_GEAR{1'b1}};                    jr9e156 <= {RX_GEAR{1'b1}};                    gof0ab6 <= {RX_GEAR{1'b1}};                    an855b1 <= {RX_GEAR{1'b1}};                    ba2ad8c <= {RX_GEAR{1'b1}};                    go56c63 <= {RX_GEAR{1'b1}};                    ieb6319 <= {RX_GEAR{1'b1}};                    qvb18c9 <= {RX_GEAR{1'b1}};                    cb3c55a <= {RX_GEAR{1'b1}};                    uve2ad4 <= {RX_GEAR{1'b1}};                    ym156a5 <= {RX_GEAR{1'b1}};                    yzab529 <= {RX_GEAR{1'b1}};                    hb5a94c <= {RX_GEAR{1'b1}};                    uid4a67 <= {RX_GEAR{1'b1}};                    pha5338 <= {RX_GEAR{1'b1}};                    mt299c7 <= {RX_GEAR{1'b1}};                end                else                begin                    blf3c2a <= rt61d92;                    jr9e156 <= ho764b2;                    gof0ab6 <= gq92c9b;                    an855b1 <= dob26ca;                    ba2ad8c <= tj9b29a;                    go56c63 <= tuca6b5;                    ieb6319 <= qv9ad58;                    qvb18c9 <= ntb562d;                    cb3c55a <= pse1c67;                    uve2ad4 <= pf719d3;                    ym156a5 <= ea674fb;                    yzab529 <= kdd3ec3;                    hb5a94c <= lqfb0ec;                    uid4a67 <= ofc3b1f;                    pha5338 <= rtec7e4;                    mt299c7 <= ie1f93b;                end            end            always @(posedge zm1b0ae or negedge reset_n_i)            begin                if (~reset_n_i) begin                    xwca01c <= 0;                    vxbf514 <= 0;                    bnbf3fe <= 3'd0;                end                else if (~aab3cda | ((yz2d99==0) & ~pf55126)) begin                    xwca01c <= 0;                    vxbf514 <= 0;                    bnbf3fe <= 3'd0;                end                else if ((~ww67255 & (pse1c67 == mt2929e)) | (ww67255 & (yz2d99 == 3'd0))) begin                    xwca01c <= ip4efb8;                    vxbf514 <= 1;                    bnbf3fe <= 3'd0;                end                else if ((~ww67255 & (pf719d3 == mt2929e)) | (ww67255 & (yz2d99 == 3'd1))) begin                    xwca01c <= yzbee20;                    vxbf514 <= 1;                    bnbf3fe <= 3'd1;                end                else if ((~ww67255 & (ea674fb == mt2929e)) | (ww67255 & (yz2d99 == 3'd2))) begin                    xwca01c <= lsb8825;                    vxbf514 <= 1;                    bnbf3fe <= 3'd2;                end                else if ((~ww67255 & (kdd3ec3 == mt2929e)) | (ww67255 & (yz2d99 == 3'd3))) begin                    xwca01c <= zm20958;                    vxbf514 <= 1;                    bnbf3fe <= 3'd3;                end                else if ((~ww67255 & (lqfb0ec == mt2929e)) | (ww67255 & (yz2d99 == 3'd4))) begin                    xwca01c <= zm25613;                    vxbf514 <= 1;                    bnbf3fe <= 3'd4;                end                else if ((~ww67255 & (ofc3b1f == mt2929e)) | (ww67255 & (yz2d99 == 3'd5))) begin                    xwca01c <= ne584d8;                    vxbf514 <= 1;                    bnbf3fe <= 3'd5;                end                else if ((~ww67255 & (rtec7e4 == mt2929e)) | (ww67255 & (yz2d99 == 3'd6))) begin                    xwca01c <= db1361f;                    vxbf514 <= 1;                    bnbf3fe <= 3'd6;                end                else if ((~ww67255 & (ie1f93b == mt2929e)) | (ww67255 & (yz2d99 == 3'd7))) begin                    xwca01c <= jpd87f6;                    vxbf514 <= 1;                    bnbf3fe <= 3'd7;                end

            end        end        if (NUM_RX_LANE == 4)        begin            always @(posedge zm1b0ae or negedge reset_n_i)            begin                if (~reset_n_i)                begin                    ne6326a <= {RX_GEAR{1'b1}};                    tj19352 <= {RX_GEAR{1'b1}};                    ofc9a97 <= {RX_GEAR{1'b1}};                    rg4d4bd <= {RX_GEAR{1'b1}};                    mr6a5ea <= {RX_GEAR{1'b1}};                    ne52f54 <= {RX_GEAR{1'b1}};                    mg97aa3 <= {RX_GEAR{1'b1}};                    fcbd519 <= {RX_GEAR{1'b1}};                    ay671e1 <= {RX_GEAR{1'b1}};                    tj38f08 <= {RX_GEAR{1'b1}};                    fnc7847 <= {RX_GEAR{1'b1}};                    qv3c23e <= {RX_GEAR{1'b1}};                    bye11f4 <= {RX_GEAR{1'b1}};                    ep8fa3 <= {RX_GEAR{1'b1}};                    ps47d1d <= {RX_GEAR{1'b1}};                    qi3e8ea <= {RX_GEAR{1'b1}};                end                else                begin                    ne6326a <= vi58b74;                    tj19352 <= zz2dd13;                    ofc9a97 <= rt744f7;                    rg4d4bd <= hd13df2;                    mr6a5ea <= off7cbf;                    ne52f54 <= uvf2fe5;                    mg97aa3 <= fpbf961;                    fcbd519 <= cme5877;                    ay671e1 <= vie4ecf;                    tj38f08 <= ec3b3d6;                    fnc7847 <= vicf58c;                    qv3c23e <= yxd631c;                    bye11f4 <= hq8c725;                    ep8fa3 <= rv1c953;                    ps47d1d <= ng254f2;                    qi3e8ea <= go53c9a;                end            end            always @(posedge zm1b0ae or negedge reset_n_i)            begin                if (~reset_n_i) begin                    nt1c7e6 <= 0;                    sufa8a7 <= 0;                    necffbf <= 3'd0;                end                else if (~bn9e6d0 | ((mgb6667==0) & ~doa8937) ) begin                    nt1c7e6 <= 0;                    sufa8a7 <= 0;                    necffbf <= 3'd0;                end                else if ((~mt392a8 & (vie4ecf == mt2929e)) | (mt392a8 & (mgb6667 == 3'd0))) begin                    nt1c7e6 <= sw1fdbc;                    sufa8a7 <= 1;                    necffbf <= 3'd0;                end                else if ((~mt392a8 & (ec3b3d6 == mt2929e)) | (mt392a8 & (mgb6667 == 3'd1))) begin                    nt1c7e6 <= thf6f0a;                    sufa8a7 <= 1;                    necffbf <= 3'd1;                end                else if ((~mt392a8 & (vicf58c == mt2929e)) | (mt392a8 & (mgb6667 == 3'd2))) begin                    nt1c7e6 <= ksbc2b2;                    sufa8a7 <= 1;                    necffbf <= 3'd2;                end                else if ((~mt392a8 & (yxd631c == mt2929e)) | (mt392a8 & (mgb6667 == 3'd3))) begin                    nt1c7e6 <= ieac83;                    sufa8a7 <= 1;                    necffbf <= 3'd3;                end                else if ((~mt392a8 & (hq8c725 == mt2929e)) | (mt392a8 & (mgb6667 == 3'd4))) begin                    nt1c7e6 <= hqb20c0;                    sufa8a7 <= 1;                    necffbf <= 3'd4;                end                else if ((~mt392a8 & (rv1c953 == mt2929e)) | (mt392a8 & (mgb6667 == 3'd5))) begin                    nt1c7e6 <= zm8301d;                    sufa8a7 <= 1;                    necffbf <= 3'd5;                end                else if ((~mt392a8 & (ng254f2 == mt2929e)) | (mt392a8 & (mgb6667 == 3'd6))) begin                    nt1c7e6 <= byc075d;                    sufa8a7 <= 1;                    necffbf <= 3'd6;                end                else if ((~mt392a8 & (go53c9a == mt2929e)) | (mt392a8 & (mgb6667 == 3'd7))) begin                    nt1c7e6 <= mt1d756;                    sufa8a7 <= 1;                    necffbf <= 3'd7;                end

            end        end    end    else if (RX_GEAR == 16)        begin        always @(posedge zm1b0ae or negedge reset_n_i)        begin            if (~reset_n_i)            begin                gb7fdfa <= 0;                qi1f9bf <= 4'd0;            end            else if (fcb8b91 )            begin                gb7fdfa <= 0;                qi1f9bf <= 4'd0;            end            else if ((~ukb3339 & ({jceb1f9[0],tu5d5ab[15:9]} == mt2929e)))            begin                gb7fdfa <= 1;                qi1f9bf <= 4'd15;            end            else if ((~ukb3339 & ({jceb1f9[1:0],tu5d5ab[15:10]} == mt2929e)))            begin                gb7fdfa <= 1;                qi1f9bf <= 4'd14;            end            else if ((~ukb3339 & ({jceb1f9[2:0], tu5d5ab[15:11]} == mt2929e)))            begin                gb7fdfa <= 1;                qi1f9bf <= 4'd13;            end            else if ((~ukb3339 & ({jceb1f9[3:0],tu5d5ab[15:12]} == mt2929e)))            begin                gb7fdfa <= 1;                qi1f9bf <= 4'd12;            end            else if ((~ukb3339 & ({jceb1f9[4:0],tu5d5ab[15:13]} == mt2929e)))            begin                gb7fdfa <= 1;                qi1f9bf <= 4'd11;            end            else if ((~ukb3339 & ({jceb1f9[5:0],tu5d5ab[15:14]} == mt2929e)))            begin                gb7fdfa <= 1;                qi1f9bf <= 4'd10;            end            else if ((~ukb3339 & ({jceb1f9[6:0],tu5d5ab[15]} == mt2929e)))            begin                gb7fdfa <= 1;                qi1f9bf <= 4'd9;            end            else if ((~ukb3339 & (jceb1f9[7:0] == mt2929e)))            begin                gb7fdfa <= 1;                qi1f9bf <= 4'd8;            end            else if ((~ukb3339 & (jceb1f9[8:1] == mt2929e)))            begin                gb7fdfa <= 1;                qi1f9bf <= 4'd7;            end            else if ((~ukb3339 & (jceb1f9[9:2] == mt2929e)))            begin                gb7fdfa <= 1;                qi1f9bf <= 4'd6;            end            else if ((~ukb3339 & (jceb1f9[10:3] == mt2929e)))            begin                gb7fdfa <= 1;                qi1f9bf <= 4'd5;            end            else if ((~ukb3339 & (jceb1f9[11:4] == mt2929e)))            begin                gb7fdfa <= 1;                qi1f9bf <= 4'd4;            end            else if ((~ukb3339 & (jceb1f9[12:5] == mt2929e)))            begin                gb7fdfa <= 1;                qi1f9bf <= 4'd3;            end            else if ((~ukb3339 & (jceb1f9[13:6] == mt2929e)))            begin                gb7fdfa <= 1;                qi1f9bf <= 4'd2;            end            else if ((~ukb3339 & (jceb1f9[14:7] == mt2929e)))            begin                gb7fdfa <= 1;                qi1f9bf <= 4'd1;            end            else if ((~ukb3339 & (jceb1f9[15:8] == mt2929e)))            begin                gb7fdfa <= 1;                qi1f9bf <= 4'd0;            end        end
        always @(posedge zm1b0ae or negedge reset_n_i)        begin            if (~reset_n_i)            begin                eaea08d <= 0;            end            else if (tj916c1 )            begin                eaea08d <= 0;            end            else if (ukb3339)            begin                if (tj9e702 == 4'd0)                begin                    eaea08d <= tu5d5ab;                end                if (tj9e702 == 4'd1)                begin                    eaea08d <= {tu5d5ab[14:0],qg56ad9[15]};                end                if (tj9e702 == 4'd2)                begin                    eaea08d <= {tu5d5ab[13:0],qg56ad9[15:14]};                end                if (tj9e702 == 4'd3)                begin                    eaea08d <= {tu5d5ab[12:0],qg56ad9[15:13]};                end                if (tj9e702 == 4'd4)                begin                    eaea08d <= {tu5d5ab[11:0],qg56ad9[15:12]};                end                if (tj9e702 == 4'd5)                begin                    eaea08d <= {tu5d5ab[10:0],qg56ad9[15:11]};                end                if (tj9e702 == 4'd6)                begin                    eaea08d <= {tu5d5ab[9:0],qg56ad9[15:10]};                end                if (tj9e702 == 4'd7)                begin                    eaea08d <= {tu5d5ab[8:0],qg56ad9[15:9]};                end                if (tj9e702 == 4'd8)                begin                    eaea08d <= {tu5d5ab[7:0],qg56ad9[15:8]};                end                if (tj9e702 == 4'd9)                begin                    eaea08d <= {tu5d5ab[6:0],qg56ad9[15:7]};                end                if (tj9e702 == 4'd10)                begin                    eaea08d <= {tu5d5ab[5:0],qg56ad9[15:6]};                end                if (tj9e702 == 4'd11)                begin                    eaea08d <= {tu5d5ab[4:0],qg56ad9[15:5]};                end                if (tj9e702 == 4'd12)                begin                    eaea08d <= {tu5d5ab[3:0],qg56ad9[15:4]};                end                if (tj9e702 == 4'd13)                begin                    eaea08d <= {tu5d5ab[2:0],qg56ad9[15:3]};                end                if (tj9e702 == 4'd14)                begin                    eaea08d <= {tu5d5ab[1:0],qg56ad9[15:2]};                end                if (tj9e702 == 4'd15)                begin                    eaea08d <= {tu5d5ab[0],qg56ad9[15:1]};                end            end            else            begin                eaea08d <= 0;            end        end        if (NUM_RX_LANE > 1)        begin            always @(posedge zm1b0ae or negedge reset_n_i)            begin                if (~reset_n_i)                begin                    wjf7ea2 <= 0;                    pfe6fcf <= 4'd0;                end                else if (vic5c8b )                begin                    wjf7ea2 <= 0;                    pfe6fcf <= 4'd0;                end                else if ((~shcce4a & ({fnc7e52[0],ipd93a4[15:9]} == mt2929e)))                begin                    wjf7ea2 <= 1;                    pfe6fcf <= 4'd15;                end                else if ((~shcce4a & ({fnc7e52[1:0],ipd93a4[15:10]} == mt2929e)))                begin                    wjf7ea2 <= 1;                    pfe6fcf <= 4'd14;                end                else if ((~shcce4a & ({fnc7e52[2:0], ipd93a4[15:11]} == mt2929e)))                begin                    wjf7ea2 <= 1;                    pfe6fcf <= 4'd13;                end                else if ((~shcce4a & ({fnc7e52[3:0],ipd93a4[15:12]} == mt2929e)))                begin                    wjf7ea2 <= 1;                    pfe6fcf <= 4'd12;                end                else if ((~shcce4a & ({fnc7e52[4:0],ipd93a4[15:13]} == mt2929e)))                begin                    wjf7ea2 <= 1;                    pfe6fcf <= 4'd11;                end                else if ((~shcce4a & ({fnc7e52[5:0],ipd93a4[15:14]} == mt2929e)))                begin                    wjf7ea2 <= 1;                    pfe6fcf <= 4'd10;                end                else if ((~shcce4a & ({fnc7e52[6:0],ipd93a4[15]} == mt2929e)))                begin                    wjf7ea2 <= 1;                    pfe6fcf <= 4'd9;                end                else if ((~shcce4a & (fnc7e52[7:0] == mt2929e)))                begin                    wjf7ea2 <= 1;                    pfe6fcf <= 4'd8;                end                else if ((~shcce4a & (fnc7e52[8:1] == mt2929e)))                begin                    wjf7ea2 <= 1;                    pfe6fcf <= 4'd7;                end                else if ((~shcce4a & (fnc7e52[9:2] == mt2929e)))                begin                    wjf7ea2 <= 1;                    pfe6fcf <= 4'd6;                end                else if ((~shcce4a & (fnc7e52[10:3] == mt2929e)))                begin                    wjf7ea2 <= 1;                    pfe6fcf <= 4'd5;                end                else if ((~shcce4a & (fnc7e52[11:4] == mt2929e)))                begin                    wjf7ea2 <= 1;                    pfe6fcf <= 4'd4;                end                else if ((~shcce4a & (fnc7e52[12:5] == mt2929e)))                begin                    wjf7ea2 <= 1;                    pfe6fcf <= 4'd3;                end                else if ((~shcce4a & (fnc7e52[13:6] == mt2929e)))                begin                    wjf7ea2 <= 1;                    pfe6fcf <= 4'd2;                end                else if ((~shcce4a & (fnc7e52[14:7] == mt2929e)))                begin                    wjf7ea2 <= 1;                    pfe6fcf <= 4'd1;                end                else if ((~shcce4a & (fnc7e52[15:8] == mt2929e)))                begin                    wjf7ea2 <= 1;                    pfe6fcf <= 4'd0;                end            end
            always @(posedge zm1b0ae or negedge reset_n_i)            begin                if (~reset_n_i)                begin                    mg8d1ca <= 0;                end                else if (lf8b60f)                begin                    mg8d1ca <= 0;                end                else if (shcce4a)                begin                    if (je9c0b6 == 4'd0)                    begin                        mg8d1ca <= ipd93a4;                    end                    if (je9c0b6 == 4'd1)                    begin                        mg8d1ca <= {ipd93a4[14:0],qt4e92d[15]};                    end                    if (je9c0b6 == 4'd2)                    begin                        mg8d1ca <= {ipd93a4[13:0],qt4e92d[15:14]};                    end                    if (je9c0b6 == 4'd3)                    begin                        mg8d1ca <= {ipd93a4[12:0],qt4e92d[15:13]};                    end                    if (je9c0b6 == 4'd4)                    begin                        mg8d1ca <= {ipd93a4[11:0],qt4e92d[15:12]};                    end                    if (je9c0b6 == 4'd5)                    begin                        mg8d1ca <= {ipd93a4[10:0],qt4e92d[15:11]};                    end                    if (je9c0b6 == 4'd6)                    begin                        mg8d1ca <= {ipd93a4[9:0],qt4e92d[15:10]};                    end                    if (je9c0b6 == 4'd7)                    begin                        mg8d1ca <= {ipd93a4[8:0],qt4e92d[15:9]};                    end                    if (je9c0b6 == 4'd8)                    begin                        mg8d1ca <= {ipd93a4[7:0],qt4e92d[15:8]};                    end                    if (je9c0b6 == 4'd9)                    begin                        mg8d1ca <= {ipd93a4[6:0],qt4e92d[15:7]};                    end                    if (je9c0b6 == 4'd10)                    begin                        mg8d1ca <= {ipd93a4[5:0],qt4e92d[15:6]};                    end                    if (je9c0b6 == 4'd11)                    begin                        mg8d1ca <= {ipd93a4[4:0],qt4e92d[15:5]};                    end                    if (je9c0b6 == 4'd12)                    begin                        mg8d1ca <= {ipd93a4[3:0],qt4e92d[15:4]};                    end                    if (je9c0b6 == 4'd13)                    begin                        mg8d1ca <= {ipd93a4[2:0],qt4e92d[15:3]};                    end                    if (je9c0b6 == 4'd14)                    begin                        mg8d1ca <= {ipd93a4[1:0],qt4e92d[15:2]};                    end                    if (je9c0b6 == 4'd15)                    begin                        mg8d1ca <= {ipd93a4[0],qt4e92d[15:1]};                    end                end                else                begin                    mg8d1ca <= 0;                end            end        end        if (NUM_RX_LANE > 2)        begin            always @(posedge zm1b0ae or negedge reset_n_i)            begin                if (~reset_n_i)                begin                    vxbf514 <= 0;                    bnbf3fe <= 4'd0;                end                else if (qi2e45b)                begin                    vxbf514 <= 0;                    bnbf3fe <= 4'd0;                end                else if ((~ww67255 & ({zxf94b3[0],hd2d9e2[15:9]} == mt2929e)))                begin                    vxbf514 <= 1;                    bnbf3fe <= 4'd15;                end                else if ((~ww67255 & ({zxf94b3[1:0],hd2d9e2[15:10]} == mt2929e)))                begin                    vxbf514 <= 1;                    bnbf3fe <= 4'd14;                end                else if ((~ww67255 & ({zxf94b3[2:0], hd2d9e2[15:11]} == mt2929e)))                begin                    vxbf514 <= 1;                    bnbf3fe <= 4'd13;                end                else if ((~ww67255 & ({zxf94b3[3:0],hd2d9e2[15:12]} == mt2929e)))                begin                    vxbf514 <= 1;                    bnbf3fe <= 4'd12;                end                else if ((~ww67255 & ({zxf94b3[4:0],hd2d9e2[15:13]} == mt2929e)))                begin                    vxbf514 <= 1;                    bnbf3fe <= 4'd11;                end                else if ((~ww67255 & ({zxf94b3[5:0],hd2d9e2[15:14]} == mt2929e)))                begin                    vxbf514 <= 1;                    bnbf3fe <= 4'd10;                end                else if ((~ww67255 & ({zxf94b3[6:0],hd2d9e2[15]} == mt2929e)))                begin                    vxbf514 <= 1;                    bnbf3fe <= 4'd9;                end                else if ((~ww67255 & (zxf94b3[7:0] == mt2929e)))                begin                    vxbf514 <= 1;                    bnbf3fe <= 4'd8;                end                else if ((~ww67255 & (zxf94b3[8:1] == mt2929e)))                begin                    vxbf514 <= 1;                    bnbf3fe <= 4'd7;                end                else if ((~ww67255 & (zxf94b3[9:2] == mt2929e)))                begin                    vxbf514 <= 1;                    bnbf3fe <= 4'd6;                end                else if ((~ww67255 & (zxf94b3[10:3] == mt2929e)))                begin                    vxbf514 <= 1;                    bnbf3fe <= 4'd5;                end                else if ((~ww67255 & (zxf94b3[11:4] == mt2929e)))                begin                    vxbf514 <= 1;                    bnbf3fe <= 4'd4;                end                else if ((~ww67255 & (zxf94b3[12:5] == mt2929e)))                begin                    vxbf514 <= 1;                    bnbf3fe <= 4'd3;                end                else if ((~ww67255 & (zxf94b3[13:6] == mt2929e)))                begin                    vxbf514 <= 1;                    bnbf3fe <= 4'd2;                end                else if ((~ww67255 & (zxf94b3[14:7] == mt2929e)))                begin                    vxbf514 <= 1;                    bnbf3fe <= 4'd1;                end                else if ((~ww67255 & (zxf94b3[15:8] == mt2929e)))                begin                    vxbf514 <= 1;                    bnbf3fe <= 4'd0;                end            end
            always @(posedge zm1b0ae or negedge reset_n_i)            begin                if (~reset_n_i)                begin                    xwca01c <= 0;                end                else if (uv5b07f )                begin                    xwca01c <= 0;                end                else if (ww67255)                begin                    if (yz2d99 == 4'd0)                    begin                        xwca01c <= hd2d9e2;                    end                    if (yz2d99 == 4'd1)                    begin                        xwca01c <= {hd2d9e2[14:0],me678b2[15]};                    end                    if (yz2d99 == 4'd2)                    begin                        xwca01c <= {hd2d9e2[13:0],me678b2[15:14]};                    end                    if (yz2d99 == 4'd3)                    begin                        xwca01c <= {hd2d9e2[12:0],me678b2[15:13]};                    end                    if (yz2d99 == 4'd4)                    begin                        xwca01c <= {hd2d9e2[11:0],me678b2[15:12]};                    end                    if (yz2d99 == 4'd5)                    begin                        xwca01c <= {hd2d9e2[10:0],me678b2[15:11]};                    end                    if (yz2d99 == 4'd6)                    begin                        xwca01c <= {hd2d9e2[9:0],me678b2[15:10]};                    end                    if (yz2d99 == 4'd7)                    begin                        xwca01c <= {hd2d9e2[8:0],me678b2[15:9]};                    end                    if (yz2d99 == 4'd8)                    begin                        xwca01c <= {hd2d9e2[7:0],me678b2[15:8]};                    end                    if (yz2d99 == 4'd9)                    begin                        xwca01c <= {hd2d9e2[6:0],me678b2[15:7]};                    end                    if (yz2d99 == 4'd10)                    begin                        xwca01c <= {hd2d9e2[5:0],me678b2[15:6]};                    end                    if (yz2d99 == 4'd11)                    begin                        xwca01c <= {hd2d9e2[4:0],me678b2[15:5]};                    end                    if (yz2d99 == 4'd12)                    begin                        xwca01c <= {hd2d9e2[3:0],me678b2[15:4]};                    end                    if (yz2d99 == 4'd13)                    begin                        xwca01c <= {hd2d9e2[2:0],me678b2[15:3]};                    end                    if (yz2d99 == 4'd14)                    begin                        xwca01c <= {hd2d9e2[1:0],me678b2[15:2]};                    end                    if (yz2d99 == 4'd15)                    begin                        xwca01c <= {hd2d9e2[0],me678b2[15:1]};                    end                end                else                begin                    xwca01c <= 0;                end            end        end        if (NUM_RX_LANE == 4)        begin            always @(posedge zm1b0ae or negedge reset_n_i)            begin                if (~reset_n_i)                begin                    sufa8a7 <= 0;                    necffbf <= 4'd0;                end                else if (su722d8 )                begin                    sufa8a7 <= 0;                    necffbf <= 4'd0;                end                else if ((~mt392a8 & ({vi52cf3[0],zmb232e[15:9]} == mt2929e)))                begin                    sufa8a7 <= 1;                    necffbf <= 4'd15;                end                else if ((~mt392a8 & ({vi52cf3[1:0],zmb232e[15:10]} == mt2929e)))                begin                    sufa8a7 <= 1;                    necffbf <= 4'd14;                end                else if ((~mt392a8 & ({vi52cf3[2:0], zmb232e[15:11]} == mt2929e)))                begin                    sufa8a7 <= 1;                    necffbf <= 4'd13;                end                else if ((~mt392a8 & ({vi52cf3[3:0],zmb232e[15:12]} == mt2929e)))                begin                    sufa8a7 <= 1;                    necffbf <= 4'd12;                end                else if ((~mt392a8 & ({vi52cf3[4:0],zmb232e[15:13]} == mt2929e)))                begin                    sufa8a7 <= 1;                    necffbf <= 4'd11;                end                else if ((~mt392a8 & ({vi52cf3[5:0],zmb232e[15:14]} == mt2929e)))                begin                    sufa8a7 <= 1;                    necffbf <= 4'd10;                end                else if ((~mt392a8 & ({vi52cf3[6:0],zmb232e[15]} == mt2929e)))                begin                    sufa8a7 <= 1;                    necffbf <= 4'd9;                end                else if ((~mt392a8 & (vi52cf3[7:0] == mt2929e)))                begin                    sufa8a7 <= 1;                    necffbf <= 4'd8;                end                else if ((~mt392a8 & (vi52cf3[8:1] == mt2929e)))                begin                    sufa8a7 <= 1;                    necffbf <= 4'd7;                end                else if ((~mt392a8 & (vi52cf3[9:2] == mt2929e)))                begin                    sufa8a7 <= 1;                    necffbf <= 4'd6;                end                else if ((~mt392a8 & (vi52cf3[10:3] == mt2929e)))                begin                    sufa8a7 <= 1;                    necffbf <= 4'd5;                end                else if ((~mt392a8 & (vi52cf3[11:4] == mt2929e)))                begin                    sufa8a7 <= 1;                    necffbf <= 4'd4;                end                else if ((~mt392a8 & (vi52cf3[12:5] == mt2929e)))                begin                    sufa8a7 <= 1;                    necffbf <= 4'd3;                end                else if ((~mt392a8 & (vi52cf3[13:6] == mt2929e)))                begin                    sufa8a7 <= 1;                    necffbf <= 4'd2;                end                else if ((~mt392a8 & (vi52cf3[14:7] == mt2929e)))                begin                    sufa8a7 <= 1;                    necffbf <= 4'd1;                end                else if ((~mt392a8 & (vi52cf3[15:8] == mt2929e)))                begin                    sufa8a7 <= 1;                    necffbf <= 4'd0;                end            end
            always @(posedge zm1b0ae or negedge reset_n_i)            begin                if (~reset_n_i)                begin                    nt1c7e6 <= 0;                end                else if (thd83fc)                begin                    nt1c7e6 <= 0;                end                else if (mt392a8)                begin                    if (mgb6667 == 4'd0)                    begin                        nt1c7e6 <= zmb232e;                    end                    if (mgb6667 == 4'd1)                    begin                        nt1c7e6 <= {zmb232e[14:0],ls8cb9e[15]};                    end                    if (mgb6667 == 4'd2)                    begin                        nt1c7e6 <= {zmb232e[13:0],ls8cb9e[15:14]};                    end                    if (mgb6667 == 4'd3)                    begin                        nt1c7e6 <= {zmb232e[12:0],ls8cb9e[15:13]};                    end                    if (mgb6667 == 4'd4)                    begin                        nt1c7e6 <= {zmb232e[11:0],ls8cb9e[15:12]};                    end                    if (mgb6667 == 4'd5)                    begin                        nt1c7e6 <= {zmb232e[10:0],ls8cb9e[15:11]};                    end                    if (mgb6667 == 4'd6)                    begin                        nt1c7e6 <= {zmb232e[9:0],ls8cb9e[15:10]};                    end                    if (mgb6667 == 4'd7)                    begin                        nt1c7e6 <= {zmb232e[8:0],ls8cb9e[15:9]};                    end                    if (mgb6667 == 4'd8)                    begin                        nt1c7e6 <= {zmb232e[7:0],ls8cb9e[15:8]};                    end                    if (mgb6667 == 4'd9)                    begin                        nt1c7e6 <= {zmb232e[6:0],ls8cb9e[15:7]};                    end                    if (mgb6667 == 4'd10)                    begin                        nt1c7e6 <= {zmb232e[5:0],ls8cb9e[15:6]};                    end                    if (mgb6667 == 4'd11)                    begin                        nt1c7e6 <= {zmb232e[4:0],ls8cb9e[15:5]};                    end                    if (mgb6667 == 4'd12)                    begin                        nt1c7e6 <= {zmb232e[3:0],ls8cb9e[15:4]};                    end                    if (mgb6667 == 4'd13)                    begin                        nt1c7e6 <= {zmb232e[2:0],ls8cb9e[15:3]};                    end                    if (mgb6667 == 4'd14)                    begin                        nt1c7e6 <= {zmb232e[1:0],ls8cb9e[15:2]};                    end                    if (mgb6667 == 4'd15)                    begin                        nt1c7e6 <= {zmb232e[0],ls8cb9e[15:1]};                    end                end                else                begin                    nt1c7e6 <= 0;                end            end        end    end
endgenerate

always@* begin necf09d<=wyff39[0];ic784eb<=wyff39[1];rtc2758<=wyff39[2];nt13ac7<=wyff39[3];jceb1f9<={co97c20>>1,wyff39[4]};fnc7e52<={mef080d>>1,wyff39[5]};zxf94b3<={do2034e>>1,wyff39[6]};vi52cf3<={cbd39b>>1,wyff39[7]};zm9679b<=wyff39[8];aab3cda<=wyff39[9];bn9e6d0<=wyff39[10];hd9b437<={ble9b09>>1,wyff39[11]};tud0df2<={dm4d84e>>1,wyff39[12]};rv37c92<={ho6c273>>1,wyff39[13]};enf24b5<={fn6139b>>1,wyff39[14]};uk92d68<={lf9cdf>>1,wyff39[15]};vxb5a0b<={uv4e6ff>>1,wyff39[16]};os682fb<={ne737fd>>1,wyff39[17]};ngbecc<={fp9bfeb>>1,wyff39[18]};rgfb316<={eaffafb>>1,wyff39[19]};wjcc59c<={kdfd7d8>>1,wyff39[20]};hd16721<={faebec4>>1,wyff39[21]};ri9c870<={pf5f623>>1,wyff39[22]};qi21c13<={dmfb11e>>1,wyff39[23]};al704c3<={hbd88f3>>1,wyff39[24]};rv130e1<={qgc479e>>1,wyff39[25]};alc3871<={an23cf0>>1,wyff39[26]};pse1c67<={blf3c2a>>1,wyff39[27]};pf719d3<={jr9e156>>1,wyff39[28]};ea674fb<={gof0ab6>>1,wyff39[29]};kdd3ec3<={an855b1>>1,wyff39[30]};lqfb0ec<={ba2ad8c>>1,wyff39[31]};ofc3b1f<={go56c63>>1,wyff39[32]};rtec7e4<={ieb6319>>1,wyff39[33]};ie1f93b<={qvb18c9>>1,wyff39[34]};vie4ecf<={ne6326a>>1,wyff39[35]};ec3b3d6<={tj19352>>1,wyff39[36]};vicf58c<={ofc9a97>>1,wyff39[37]};yxd631c<={rg4d4bd>>1,wyff39[38]};hq8c725<={mr6a5ea>>1,wyff39[39]};rv1c953<={ne52f54>>1,wyff39[40]};ng254f2<={mg97aa3>>1,wyff39[41]};go53c9a<={fcbd519>>1,wyff39[42]};yxf268e<={yx54651>>1,wyff39[43]};kf9a3aa<={wya328d>>1,wyff39[44]};tj8eaa0<={nt19468>>1,wyff39[45]};rvaa834<={rgca347>>1,wyff39[46]};lfa0d3d<={qt51a3b>>1,wyff39[47]};ym34f76<={gq8d1dc>>1,wyff39[48]};xl3dd8b<={ay68ee0>>1,wyff39[49]};tu762fb<={vi47700>>1,wyff39[50]};bn8bedc<={czdc018>>1,wyff39[51]};dmfb736<={goe00c5>>1,wyff39[52]};yxdcd99<={qi629>>1,wyff39[53]};oh36667<={bn3148>>1,wyff39[54]};fc999e9<={oh18a47>>1,wyff39[55]};yk67a55<={vic523c>>1,wyff39[56]};jpe954e<={oh291e2>>1,wyff39[57]};th553be<={ho48f15>>1,wyff39[58]};ip4efb8<={cb3c55a>>1,wyff39[59]};yzbee20<={uve2ad4>>1,wyff39[60]};lsb8825<={ym156a5>>1,wyff39[61]};zm20958<={yzab529>>1,wyff39[62]};zm25613<={hb5a94c>>1,wyff39[63]};ne584d8<={uid4a67>>1,wyff39[64]};db1361f<={pha5338>>1,wyff39[65]};jpd87f6<={mt299c7>>1,wyff39[66]};sw1fdbc<={ay671e1>>1,wyff39[67]};thf6f0a<={tj38f08>>1,wyff39[68]};ksbc2b2<={fnc7847>>1,wyff39[69]};ieac83<={qv3c23e>>1,wyff39[70]};hqb20c0<={bye11f4>>1,wyff39[71]};zm8301d<={ep8fa3>>1,wyff39[72]};byc075d<={ps47d1d>>1,wyff39[73]};mt1d756<={qi3e8ea>>1,wyff39[74]};tu5d5ab<={gqa3a82>>1,wyff39[75]};qg56ad9<={sj1d411>>1,wyff39[76]};anab64e<={eaea08d>>1,wyff39[77]};ipd93a4<={ks82347>>1,wyff39[78]};qt4e92d<={hq11a39>>1,wyff39[79]};sja4b67<={mg8d1ca>>1,wyff39[80]};hd2d9e2<={ps47280>>1,wyff39[81]};me678b2<={wl39403>>1,wyff39[82]};mre2c8c<={xwca01c>>1,wyff39[83]};zmb232e<={oh8071f>>1,wyff39[84]};ls8cb9e<={lf38fc>>1,wyff39[85]};uk2e79c<={nt1c7e6>>1,wyff39[86]};tj9e702<={qi1f9bf>>1,wyff39[87]};je9c0b6<={pfe6fcf>>1,wyff39[88]};yz2d99<={bnbf3fe>>1,wyff39[89]};mgb6667<={necffbf>>1,wyff39[90]};ukb3339<=wyff39[91];hq999c9<=wyff39[92];shcce4a<=wyff39[93];ww67255<=wyff39[94];mt392a8<=wyff39[95];wjc9544<=wyff39[96];bl4aa24<=wyff39[97];pf55126<=wyff39[98];doa8937<=wyff39[99];uv449ba<={vx382d2>>1,wyff39[100]};ie24dd5<={osc1696>>1,wyff39[101]};ep26ea8<={jeb4b0>>1,wyff39[102]};db37545<={fn5a583>>1,wyff39[103]};dbbaa2f<={dzd2c1e>>1,wyff39[104]};byd517e<={ls960f7>>1,wyff39[105]};vka8bf3<={vxb07ba>>1,wyff39[106]};jp45f9a<={ls83dd6>>1,wyff39[107]};zm2fcd7<={ls1eeb2>>1,wyff39[108]};th7e6bb<={czf7593>>1,wyff39[109]};fnf35df<={vxbac9d>>1,wyff39[110]};sj9aeff<={qtd64ee>>1,wyff39[111]};ohbbfee<={hq93ba3>>1,wyff39[112]};ayffba3<={qi9dd1b>>1,wyff39[113]};neee8c5<={lqee8d8>>1,wyff39[114]};gqa315e<={ld746c3>>1,wyff39[115]};vic5784<={iea361e>>1,wyff39[116]};sh5e111<={do1b0f0>>1,wyff39[117]};fp84461<={nrd8782>>1,wyff39[118]};xy11876<={shc3c17>>1,wyff39[119]};rt61d92<={cmf05e2>>1,wyff39[120]};ho764b2<={ou82f10>>1,wyff39[121]};gq92c9b<={kf17880>>1,wyff39[122]};dob26ca<={oubc405>>1,wyff39[123]};tj9b29a<={mre2028>>1,wyff39[124]};tuca6b5<={ie10144>>1,wyff39[125]};qv9ad58<={an80a21>>1,wyff39[126]};ntb562d<={ec510d>>1,wyff39[127]};vi58b74<={qt44346>>1,wyff39[128]};zz2dd13<={ym21a34>>1,wyff39[129]};rt744f7<={cbd1a0>>1,wyff39[130]};hd13df2<={ui68d04>>1,wyff39[131]};off7cbf<={yk46820>>1,wyff39[132]};uvf2fe5<={ks34100>>1,wyff39[133]};fpbf961<={dba0800>>1,wyff39[134]};cme5877<={pu4006>>1,wyff39[135]};ir2c3b8<=wyff39[136];nr61dc5<=wyff39[137];riee2e<=wyff39[138];kq77172<=wyff39[139];fcb8b91<=wyff39[140];vic5c8b<=wyff39[141];qi2e45b<=wyff39[142];su722d8<=wyff39[143];tj916c1<=wyff39[144];lf8b60f<=wyff39[145];uv5b07f<=wyff39[146];thd83fc<=wyff39[147];end
always@* begin mec1fe7[2047]<=xjc2b97;mec1fe7[2046]<=co15cbe;mec1fe7[2044]<=anae5f0;mec1fe7[2040]<=co97c20[0];mec1fe7[2032]<=mef080d[0];mec1fe7[2017]<=do2034e[0];mec1fe7[2013]<=qtd64ee[0];mec1fe7[1990]<=ks34100[0];mec1fe7[1987]<=cbd39b[0];mec1fe7[1980]<=ay68ee0[0];mec1fe7[1979]<=hq93ba3[0];mec1fe7[1963]<=ieb6319[0];mec1fe7[1957]<=ou82f10[0];mec1fe7[1942]<=bn3148[0];mec1fe7[1932]<=dba0800[0];mec1fe7[1926]<=kded4e9;mec1fe7[1921]<=dmfb11e[0];mec1fe7[1914]<=do1b0f0[0];mec1fe7[1913]<=vi47700[0];mec1fe7[1911]<=qi9dd1b[0];mec1fe7[1903]<=fcbd519[0];mec1fe7[1879]<=qvb18c9[0];mec1fe7[1876]<=bnbf3fe[0];mec1fe7[1872]<=pha5338[0];mec1fe7[1866]<=kf17880[0];mec1fe7[1837]<=oh18a47[0];mec1fe7[1816]<=pu4006[0];mec1fe7[1805]<=cz6a74d;mec1fe7[1795]<=hbd88f3[0];mec1fe7[1783]<=rgca347[0];mec1fe7[1780]<=nrd8782[0];mec1fe7[1778]<=czdc018[0];mec1fe7[1775]<=lqee8d8[0];mec1fe7[1770]<=yzab529[0];mec1fe7[1758]<=yx54651[0];mec1fe7[1710]<=ne6326a[0];mec1fe7[1704]<=necffbf[0];mec1fe7[1696]<=mt299c7[0];mec1fe7[1685]<=oubc405[0];mec1fe7[1679]<=uv4e6ff[0];mec1fe7[1627]<=vic523c[0];mec1fe7[1584]<=ri20032;mec1fe7[1567]<=ls960f7[0];mec1fe7[1562]<=kq53a6c;mec1fe7[1548]<=fn4a7a8;mec1fe7[1543]<=qgc479e[0];mec1fe7[1521]<=ui68d04[0];mec1fe7[1519]<=qt51a3b[0];mec1fe7[1513]<=shc3c17[0];mec1fe7[1509]<=goe00c5[0];mec1fe7[1502]<=ld746c3[0];mec1fe7[1499]<=ne52f54[0];mec1fe7[1493]<=qi1f9bf[0];mec1fe7[1492]<=hb5a94c[0];mec1fe7[1469]<=wya328d[0];mec1fe7[1466]<=uve2ad4[0];mec1fe7[1415]<=fn5a583[0];mec1fe7[1404]<=ym21a34[0];mec1fe7[1398]<=rg4d4bd[0];mec1fe7[1377]<=osc1696[0];mec1fe7[1373]<=tj19352[0];mec1fe7[1361]<=gb7fdfa;mec1fe7[1355]<=mg8d1ca[0];mec1fe7[1349]<=wjf7ea2;mec1fe7[1344]<=ay671e1[0];mec1fe7[1326]<=wl39403[0];mec1fe7[1323]<=mre2028[0];mec1fe7[1310]<=ne737fd[0];mec1fe7[1301]<=sufa8a7;mec1fe7[1280]<=fnc7847[0];mec1fe7[1210]<=oh8071f[0];mec1fe7[1207]<=oh291e2[0];mec1fe7[1199]<=an80a21[0];mec1fe7[1144]<=eaffafb[0];mec1fe7[1120]<=aa193;mec1fe7[1110]<=lsa29c1;mec1fe7[1086]<=vxb07ba[0];mec1fe7[1076]<=ble9b09[0];mec1fe7[1048]<=ww53d47;mec1fe7[1039]<=an23cf0[0];mec1fe7[1026]<=bye11f4[0];mec1fe7[1023]<=hbd8572;mec1fe7[1006]<=vxbac9d[0];mec1fe7[995]<=yk46820[0];mec1fe7[990]<=gq8d1dc[0];mec1fe7[981]<=go56c63[0];mec1fe7[978]<=cmf05e2[0];mec1fe7[971]<=qi629[0];mec1fe7[960]<=pf5f623[0];mec1fe7[957]<=iea361e[0];mec1fe7[951]<=mg97aa3[0];mec1fe7[938]<=pfe6fcf[0];mec1fe7[936]<=uid4a67[0];mec1fe7[891]<=nt19468[0];mec1fe7[885]<=ym156a5[0];mec1fe7[839]<=lf9cdf[0];mec1fe7[783]<=dzd2c1e[0];mec1fe7[778]<=ep39e13;mec1fe7[774]<=qg494f5;mec1fe7[760]<=cbd1a0[0];mec1fe7[749]<=mr6a5ea[0];mec1fe7[746]<=nt1c7e6[0];mec1fe7[733]<=cb3c55a[0];mec1fe7[707]<=jeb4b0[0];mec1fe7[702]<=qt44346[0];mec1fe7[699]<=ofc9a97[0];mec1fe7[688]<=vx382d2[0];mec1fe7[677]<=hq11a39[0];mec1fe7[674]<=zkfefd4;mec1fe7[663]<=ps47280[0];mec1fe7[650]<=vxbf514;mec1fe7[640]<=tj38f08[0];mec1fe7[605]<=xwca01c[0];mec1fe7[599]<=ie10144[0];mec1fe7[572]<=fp9bfeb[0];mec1fe7[555]<=qgd4538;mec1fe7[513]<=qv3c23e[0];mec1fe7[503]<=czf7593[0];mec1fe7[490]<=ba2ad8c[0];mec1fe7[480]<=faebec4[0];mec1fe7[419]<=fn6139b[0];mec1fe7[389]<=dm473c2;mec1fe7[387]<=hd64c1;mec1fe7[373]<=lf38fc[0];mec1fe7[366]<=ho48f15[0];mec1fe7[351]<=ec510d[0];mec1fe7[344]<=xya705a;mec1fe7[338]<=ks82347[0];mec1fe7[251]<=ls1eeb2[0];mec1fe7[245]<=an855b1[0];mec1fe7[240]<=kdfd7d8[0];mec1fe7[209]<=ho6c273[0];mec1fe7[194]<=baa8e78;mec1fe7[193]<=aac98;mec1fe7[172]<=fc14e0b;mec1fe7[169]<=eaea08d[0];mec1fe7[125]<=ls83dd6[0];mec1fe7[122]<=gof0ab6[0];mec1fe7[104]<=dm4d84e[0];mec1fe7[97]<=kqf51cf;mec1fe7[84]<=sj1d411[0];mec1fe7[61]<=jr9e156[0];mec1fe7[48]<=jr9ea39;mec1fe7[42]<=gqa3a82[0];mec1fe7[30]<=blf3c2a[0];mec1fe7[21]<=qi3e8ea[0];mec1fe7[10]<=ps47d1d[0];mec1fe7[5]<=ep8fa3[0];end         assign pse4f7d = mec1fe7,wyff39 = rv3df57; initial begin nrf905f = $fopen(".fred"); $fdisplay( nrf905f, "%3h\n%3h", (wje7227 >> 4) & zz2793d, (wje7227 >> (xjc89e4+4)) & zz2793d ); $fclose(nrf905f); $readmemh(".fred", qg7d5f9); end always @ (pse4f7d) begin zk57e41 = qg7d5f9[1]; for (fnc82fe=0; fnc82fe<al7f9c8; fnc82fe=fnc82fe+1) begin rv3df57[fnc82fe] = pse4f7d[zk57e41]; hdbf20b = ^(zk57e41 & qg7d5f9[0]); zk57e41 = {zk57e41, hdbf20b}; end end 
endmodule
















































`timescale 1 ns / 100 ps
module ym21248 #(
	parameter NUM_RX_LANE = 4,	parameter RX_GEAR = 16,        parameter FIFO_DEPTH = 16,        parameter FIFO_TYPE0 = "EBR",        parameter FIFO_TYPE1 = "EBR",        parameter FIFO_TYPE2 = "EBR",        parameter FIFO_TYPE3 = "EBR"
)
(
    input  wire                          ep8055c,
    input  wire                          ir2ae4,
    input  wire [RX_GEAR-1:0]             co97c20,
    input  wire [RX_GEAR-1:0]             mef080d,
    input  wire [RX_GEAR-1:0]             do2034e,
    input  wire [RX_GEAR-1:0]             cbd39b,
    input  wire                           fa42221,
    input  wire                           tw1110b,
    input  wire                           ie8885b,
    input  wire                           wj442d9,
    input  wire                           uk216cc,

    output wire [RX_GEAR-1:0]             bd0_o,
    output wire [RX_GEAR-1:0]             bd1_o,
    output wire [RX_GEAR-1:0]             bd2_o,
    output wire [RX_GEAR-1:0]             bd3_o,
    output wire                           hs_sync_o
);
reg       db27410;
reg       pu3a086, xwd0433;
reg [9:0] ou8219b;
reg       mg10cd9;
reg  ba866c8;
reg  oh33643;
reg  nt9b21d;
reg [RX_GEAR - 1 : 0] jceb1f9;
reg [RX_GEAR - 1 : 0] fnc7e52;
reg [RX_GEAR - 1 : 0] zxf94b3;
reg [RX_GEAR - 1 : 0] vi52cf3;
reg zz84765;
reg ux23b2e;
reg an1d975;
reg pfecbac;
reg mr65d66;
reg ie2eb34;
reg mr759a1;
reg [9 : 0] ukacd0d;
reg zk66868;
reg mg34343;
reg sja1a18;
reg gdd0c4;
reg [2047:0] mec1fe7;
wire [15:0] wyff39;





localparam al7f9c8 = 16,fnfce44 = 32'hfdffc68b;
localparam [31:0] wje7227 = fnfce44;
localparam xjc89e4 = fnfce44 & 4'hf;
localparam [11:0] zz2793d = 'h7ff;
wire [(1 << xjc89e4) -1:0] pse4f7d;
reg [al7f9c8-1:0] rv3df57;
reg [xjc89e4-1:0] qg7d5f9 [0:1];
reg [xjc89e4-1:0] zk57e41;
reg hdbf20b;
integer nrf905f;
integer fnc82fe;








always @(posedge ir2ae4 or posedge ep8055c) begin    if(ep8055c) begin        ou8219b <= 0;    end    else begin        ou8219b <= {ukacd0d[7:0], mr65d66};    end
end

assign  hs_sync_o = ukacd0d[2];  

always @(posedge ir2ae4 or posedge ep8055c) begin    if (ep8055c) begin        db27410 <= 1'b1;    end    else if (!ukacd0d[2] & ukacd0d[4]) begin          db27410 <= 1'b1;    end    else begin        db27410 <= 1'b0;    end
end

pmi_fifo #(    .pmi_data_width         (RX_GEAR),    .pmi_data_depth         (FIFO_DEPTH),    .pmi_full_flag          (FIFO_DEPTH),    .pmi_empty_flag         (0),    .pmi_almost_full_flag   (FIFO_DEPTH-1),    .pmi_almost_empty_flag  (1),    .pmi_regmode            ("reg"),    .pmi_family             ("LIFMD"),    .module_type            ("pmi_fifo"),    .pmi_implementation     (FIFO_TYPE0)
)
dm422c3 (    .Data         (co97c20),    .Clock        (ir2ae4),    .WrEn         (fa42221),     .RdEn         (uk216cc),     .Reset        (db27410),    .Q            (bd0_o),    .Empty        (),    .Full         (),    .AlmostEmpty  (),    .AlmostFull   ()
);

generate
if (NUM_RX_LANE > 1) begin
pmi_fifo #(    .pmi_data_width         (RX_GEAR),    .pmi_data_depth         (FIFO_DEPTH),    .pmi_full_flag          (FIFO_DEPTH),    .pmi_empty_flag         (0),    .pmi_almost_full_flag   (FIFO_DEPTH-1),    .pmi_almost_empty_flag  (1),    .pmi_regmode            ("reg"),    .pmi_family             ("LIFMD"),    .module_type            ("pmi_fifo"),    .pmi_implementation     (FIFO_TYPE1)
)  dm52e2d (      .Data         (mef080d),      .Clock        (ir2ae4),      .WrEn         (tw1110b),       .RdEn         (uk216cc),       .Reset        (db27410),      .Q            (bd1_o),      .Empty        (),      .Full         (),      .AlmostEmpty  (),      .AlmostFull   ()  );
end
else begin  assign bd1_o = {RX_GEAR{1'b0}};
end
endgenerate

generate
if (NUM_RX_LANE > 2) begin  pmi_fifo #(    .pmi_data_width         (RX_GEAR),    .pmi_data_depth         (FIFO_DEPTH),    .pmi_full_flag          (FIFO_DEPTH),    .pmi_empty_flag         (0),    .pmi_almost_full_flag   (FIFO_DEPTH-1),    .pmi_almost_empty_flag  (1),    .pmi_regmode            ("reg"),    .pmi_family             ("LIFMD"),    .module_type            ("pmi_fifo"),    .pmi_implementation     (FIFO_TYPE2)  )  sudbc54 (      .Data         (do2034e),      .Clock        (ir2ae4),      .WrEn         (ie8885b),      .RdEn         (uk216cc),       .Reset        (db27410),      .Q            (bd2_o),      .Empty        (),      .Full         (),      .AlmostEmpty  (),      .AlmostFull   ()  );
end
else begin  assign bd2_o = {RX_GEAR{1'b0}};
end
endgenerate

generate
if (NUM_RX_LANE > 3) begin  pmi_fifo #(    .pmi_data_width         (RX_GEAR),    .pmi_data_depth         (FIFO_DEPTH),    .pmi_full_flag          (FIFO_DEPTH),    .pmi_empty_flag         (0),    .pmi_almost_full_flag   (FIFO_DEPTH-1),    .pmi_almost_empty_flag  (1),    .pmi_regmode            ("reg"),    .pmi_family             ("LIFMD"),    .module_type            ("pmi_fifo"),    .pmi_implementation     (FIFO_TYPE3)  )  gqb662b (      .Data         (cbd39b),      .Clock        (ir2ae4),      .WrEn         (wj442d9),      .RdEn         (uk216cc),       .Reset        (db27410),      .Q            (bd3_o),      .Empty        (),      .Full         (),      .AlmostEmpty  (),      .AlmostFull   ()  );
end
else begin  assign bd3_o = {RX_GEAR{1'b0}};
end
endgenerate

always@* begin jceb1f9<={co97c20>>1,wyff39[0]};fnc7e52<={mef080d>>1,wyff39[1]};zxf94b3<={do2034e>>1,wyff39[2]};vi52cf3<={cbd39b>>1,wyff39[3]};zz84765<=wyff39[4];ux23b2e<=wyff39[5];an1d975<=wyff39[6];pfecbac<=wyff39[7];mr65d66<=wyff39[8];ie2eb34<=wyff39[9];mr759a1<=wyff39[10];ukacd0d<={ou8219b>>1,wyff39[11]};zk66868<=wyff39[12];mg34343<=wyff39[13];sja1a18<=wyff39[14];gdd0c4<=wyff39[15];end
always@* begin mec1fe7[2047]<=mef080d[0];mec1fe7[2046]<=do2034e[0];mec1fe7[2044]<=cbd39b[0];mec1fe7[2040]<=fa42221;mec1fe7[2032]<=tw1110b;mec1fe7[2017]<=ie8885b;mec1fe7[1987]<=wj442d9;mec1fe7[1926]<=uk216cc;mec1fe7[1805]<=pu3a086;mec1fe7[1562]<=xwd0433;mec1fe7[1076]<=ou8219b[0];mec1fe7[1023]<=co97c20[0];mec1fe7[839]<=nt9b21d;mec1fe7[419]<=oh33643;mec1fe7[209]<=ba866c8;mec1fe7[104]<=mg10cd9;end         assign pse4f7d = mec1fe7,wyff39 = rv3df57; initial begin nrf905f = $fopen(".fred"); $fdisplay( nrf905f, "%3h\n%3h", (wje7227 >> 4) & zz2793d, (wje7227 >> (xjc89e4+4)) & zz2793d ); $fclose(nrf905f); $readmemh(".fred", qg7d5f9); end always @ (pse4f7d) begin zk57e41 = qg7d5f9[1]; for (fnc82fe=0; fnc82fe<al7f9c8; fnc82fe=fnc82fe+1) begin rv3df57[fnc82fe] = pse4f7d[zk57e41]; hdbf20b = ^(zk57e41 & qg7d5f9[0]); zk57e41 = {zk57e41, hdbf20b}; end end 
endmodule























































`timescale 1 ns / 100 ps
module dphy_rx_wrap #(
    parameter     NUM_RX_LANE = 4,    parameter     RX_GEAR     = 16,    parameter     DPHY_RX_IP  = "LATTICE",    parameter     LANE_ALIGN  = "OFF",    parameter     WORD_ALIGN  = "OFF",     parameter     RX_CLK_MODE = "HS_LP",    parameter     BYTECLK_MHZ = 111,    parameter     FIFO_DEPTH  = 16,    parameter     FIFO_TYPE0  = "EBR",    parameter     FIFO_TYPE1  = "EBR",    parameter     FIFO_TYPE2  = "EBR",    parameter     FIFO_TYPE3  = "EBR"
)
(
    input wire                reset_n_i,
    input wire                reset_byte_n_i,
    input wire                reset_byte_fr_n_i,
    input wire                clk_byte_fr_i,
    inout wire                clk_p_i,
    inout wire                clk_n_i,
    inout wire                d0_p_io,	
    inout wire                d0_n_io,	
    inout wire                d1_p_i,	
    inout wire                d1_n_i,	
    inout wire                d2_p_i,	
    inout wire                d2_n_i,	
    inout wire                d3_p_i,	
    inout wire                d3_n_i,
    input wire                term_clk_en_i,
    input wire                term_d0_en_i,
    input wire                term_d1_en_i,
    input wire                term_d2_en_i,
    input wire                term_d3_en_i,
    input wire                hs_d0_en_i,
    input wire                hs_d1_en_i,
    input wire                hs_d2_en_i,
    input wire                hs_d3_en_i,
    input wire                lp_d0_tx_en_i,
    input wire                lp_d0_tx_p_i,
    input wire                lp_d0_tx_n_i,

    output wire               clk_hs_o,
    output wire               clk_byte_o,
    output wire [RX_GEAR-1:0] bd0_o,
    output wire [RX_GEAR-1:0] bd1_o,
    output wire [RX_GEAR-1:0] bd2_o,
    output wire [RX_GEAR-1:0] bd3_o,
    output wire               hs_sync_o,       

    output wire               lp_clk_rx_p_o,
    output wire               lp_clk_rx_n_o,
    output wire               lp_d0_rx_p_o,
    output wire               lp_d0_rx_n_o,
    output wire               lp_d1_rx_p_o,
    output wire               lp_d1_rx_n_o,
    output wire               lp_d2_rx_p_o,
    output wire               lp_d2_rx_n_o,
    output wire               lp_d3_rx_p_o,
    output wire               lp_d3_rx_n_o,
    output wire               cd_clk_o,
    output wire               cd_d0_o
);
reg                    hs_d0_en_r, hs_d1_en_r, hs_d2_en_r, hs_d3_en_r;
reg                    icce9c1, th74e08, zma7047, lf3823a;
reg                    mec11d6, ux8eb0, ne47585, fc3ac2b;
reg                    shd615a, zzb0ad4, wl856a7, uk2b53c;
reg                    bl5a9e0, ykd4f07, twa7838, sj3c1c3;
reg                    qge0e1c, qv70e0, fp38705, shc382e;
reg                    rv1c174, wwe0ba7, ks5d38, gq2e9c1;
reg                    xj74e09, fca704f, hd3827a, goc13d6;
reg [1:0]              zz9eb0, dz4f587;
reg [1:0]              ip7ac3f, qtd61fc;
reg [1:0]              jrb0fe4, wy87f27;
reg [1:0]              vk3f938, rtfc9c2;
reg [RX_GEAR-1:0]      tj270ba, ph385d6, vvc2eb6, oh175b6;
reg [RX_GEAR-1:0]      ald6da6, mgb6d35, qib69a8, yzb4d40;
reg [RX_GEAR-1:0]      ng35029, zma814a, th40a53, aa529f;
reg [RX_GEAR-1:0]      rt4a7c5, os53e2f, wl9f179, ipf8bcc;
reg [RX_GEAR-1:0]      ba2f32b, dm7995a, gbccad3, gb6569d;
reg                    qgd4538;
reg [3:0]              vx382d2;
wire                   ald3b46, mg9da35, gbed1a8, ui68d45;
wire                   yk46a28, ls35140, jea8a02, rt45012;
wire [1:0]             jr28096, vv404b7;
wire [1:0]             oh25be, oh12df5;
wire [1:0]             vk96fad, zmb7d6b;
wire                   sjbeb5a, qgf5ad4, baad6a1, jp6b50b;
wire                   rt5a85e;
wire                   wwd42f7, ira17b9, hqbdcd;
wire                   kd5ee6a;
wire [RX_GEAR-1:0]     gqb9aad;
wire                   fncd569, uv6ab4e, fn55a75;
wire                   xyad3ae, by69d73;
wire [3:0]             en4eb9a, mr75cd4, wlae6a5;
wire [RX_GEAR-1:0]     ux9a963, uid4b1d, pha58e8, ir2c746;
wire [15:0]            lq63a35, gd1d1ab, ofe8d5d, cm46aec;
wire [RX_GEAR-1:0]     gdabb02, vi5d815, blec0aa, ip60557;
wire                   ir2abd, mg155ec, hdaaf61, dm57b0f;
wire [RX_GEAR-1:0]     thec3db, xj61edf, swf6fe, zx7b7f1;
wire [RX_GEAR-1:0]     bydfc79, zkfe3cb, zkf1e5b, wl8f2db;
wire [RX_GEAR-1:0]     aycb6ea, kd5b751, osdba8c, bldd461;
wire [RX_GEAR-1:0]     gb51878, fc8c3c4, vv61e22, cof116;
wire                   yk788b1;
wire                   qgc4589, bn22c48, fp16247, yzb123e;
localparam  lf3260f   = 1000000/BYTECLK_MHZ;
localparam  ie983fa          = 6*(lf3260f/RX_GEAR);
localparam  kd7f448   = (85000+ie983fa)/lf3260f < 2 ? 1 : (((85000+ie983fa)/lf3260f) -1);
reg sj12d19, ba968cd, wlb466b, swa335c, hd19ae0;
reg [RX_GEAR-1:0] dz6b836, ww5c1b7,                  kqe0db9, vx6dc8,  oh36e46, hqb7234,  gqb91a3, blc8d18;

`ifdef WORD_ALIGN

`else

`endif
reg qg468c7;
reg ym34638;
reg iea31c0;
reg ep18e00;
reg vvc7004;
reg tj38027;
reg zkc013e;
reg sw9f2;
reg tw4f91;
reg db27c8b;
reg sw3e45f;
reg wjf22f9;
reg zz917cd;
reg hd8be6f;
reg ld5f37e;
reg zxf9bf6;
reg blcdfb7;
reg sh6fdbf;
reg pf7edfd;
reg vvf6fee;
reg lsb7f76;
reg lfbfbb2;
reg offdd96;
reg pseecb5;
reg ps765ab;
reg twb2d5b;
reg vk96ada;
reg bnb56d3;
reg irab69e;
reg ip5b4f4;
reg zkda7a4;
reg gbd3d22;
reg lf9e915;
reg byf48af;
reg mta457b;
reg ph22bdd;
reg ks15eef;
reg ntaf778;
reg xj7bbc6;
reg hbdde36;
reg [1 : 0] qgef1b6;
reg [1 : 0] su78db0;
reg [1 : 0] wjc6d81;
reg [1 : 0] wl36c0c;
reg [1 : 0] swb6064;
reg [1 : 0] tjb0321;
reg [1 : 0] xl8190e;
reg [1 : 0] jrc877;
reg [RX_GEAR - 1 : 0] ie21dff;
reg [RX_GEAR - 1 : 0] cm77fc2;
reg [RX_GEAR - 1 : 0] icff086;
reg [RX_GEAR - 1 : 0] jpc218c;
reg [RX_GEAR - 1 : 0] tw86338;
reg [RX_GEAR - 1 : 0] do8ce19;
reg [RX_GEAR - 1 : 0] ph38658;
reg [RX_GEAR - 1 : 0] lf19635;
reg [RX_GEAR - 1 : 0] jc58d79;
reg [RX_GEAR - 1 : 0] ng35e54;
reg [RX_GEAR - 1 : 0] jc7951e;
reg [RX_GEAR - 1 : 0] ip54792;
reg [RX_GEAR - 1 : 0] fc1e4a9;
reg [RX_GEAR - 1 : 0] sw92a55;
reg [RX_GEAR - 1 : 0] coa954d;
reg [RX_GEAR - 1 : 0] nr5534e;
reg [RX_GEAR - 1 : 0] ne4d3b8;
reg [RX_GEAR - 1 : 0] kd4ee12;
reg [RX_GEAR - 1 : 0] zmb84a1;
reg [RX_GEAR - 1 : 0] ir12857;
reg wjc9544;
reg [3 : 0] uv449ba;
reg ouaf7d;
reg ne57be8;
reg ngbdf43;
reg goefa1b;
reg [1 : 0] ui7d0d9;
reg [1 : 0] ipe86c8;
reg [1 : 0] kq43645;
reg [1 : 0] hq1b229;
reg [1 : 0] shd914a;
reg [1 : 0] hbc8a55;
reg pf452af;
reg sj2957e;
reg pf4abf5;
reg xj55fae;
reg ntafd76;
reg bl7ebb7;
reg kqf5dbe;
reg gdaedf1;
reg vi76f8d;
reg [RX_GEAR - 1 : 0] kfbe352;
reg jcf1a95;
reg wy8d4ab;
reg al6a558;
reg vi52ac4;
reg an95623;
reg [3 : 0] ohab11d;
reg [3 : 0] dm588ec;
reg [3 : 0] kqc4762;
reg [RX_GEAR - 1 : 0] cb1d885;
reg [RX_GEAR - 1 : 0] me62167;
reg [RX_GEAR - 1 : 0] wl859c0;
reg [RX_GEAR - 1 : 0] ui6702c;
reg [15 : 0] xl38160;
reg [15 : 0] fac0b06;
reg [15 : 0] sw5833;
reg [15 : 0] ux2c199;
reg [RX_GEAR - 1 : 0] zz666c;
reg [RX_GEAR - 1 : 0] ng99b3d;
reg [RX_GEAR - 1 : 0] zk6cf57;
reg [RX_GEAR - 1 : 0] ph3d5d1;
reg sueae8e;
reg ne57471;
reg lfba38a;
reg qgd1c57;
reg [RX_GEAR - 1 : 0] fn715c7;
reg [RX_GEAR - 1 : 0] ne571f4;
reg [RX_GEAR - 1 : 0] dzc7d13;
reg [RX_GEAR - 1 : 0] nef44f0;
reg [RX_GEAR - 1 : 0] lf13c12;
reg [RX_GEAR - 1 : 0] eaf04be;
reg [RX_GEAR - 1 : 0] mt12f81;
reg [RX_GEAR - 1 : 0] uxbe069;
reg [RX_GEAR - 1 : 0] db81a68;
reg [RX_GEAR - 1 : 0] lq69a3c;
reg [RX_GEAR - 1 : 0] su68f12;
reg [RX_GEAR - 1 : 0] wl3c482;
reg [RX_GEAR - 1 : 0] cb120a4;
reg [RX_GEAR - 1 : 0] mg82925;
reg [RX_GEAR - 1 : 0] gda4942;
reg [RX_GEAR - 1 : 0] je250a0;
reg rv28503;
reg fa4281f;
reg pu140fa;
reg fpa07d3;
reg lf3e9f;
reg ks1f4fe;
reg osfa7f0;
reg qtd3f81;
reg mt9fc0d;
reg jcfe06d;
reg [RX_GEAR - 1 : 0] bn81b58;
reg [RX_GEAR - 1 : 0] qg6d63d;
reg [RX_GEAR - 1 : 0] ne58f4e;
reg [RX_GEAR - 1 : 0] tj3d396;
reg [RX_GEAR - 1 : 0] en4e5b6;
reg [RX_GEAR - 1 : 0] hq96da8;
reg [RX_GEAR - 1 : 0] wyb6a18;
reg [RX_GEAR - 1 : 0] lsa8606;
reg [2047:0] mec1fe7;
wire [147:0] wyff39;


`ifdef WORD_ALIGN

`else

`endif




localparam al7f9c8 = 148,fnfce44 = 32'hfdffca8b;
localparam [31:0] wje7227 = fnfce44;
localparam xjc89e4 = fnfce44 & 4'hf;
localparam [11:0] zz2793d = 'h7ff;
wire [(1 << xjc89e4) -1:0] pse4f7d;
reg [al7f9c8-1:0] rv3df57;
reg [xjc89e4-1:0] qg7d5f9 [0:1];
reg [xjc89e4-1:0] zk57e41;
reg hdbf20b;
integer nrf905f;
integer fnc82fe;


`ifdef WORD_ALIGN


`else


`endif






generate  if (DPHY_RX_IP == "MIXEL") begin    always @(posedge clk_byte_fr_i or negedge reset_n_i)    begin        if (~reset_n_i)        begin            qgd4538 <= 0;        end        else if (uv449ba == 0)        begin            qgd4538 <= ym34638;        end    end
    always @(posedge clk_byte_fr_i or negedge reset_n_i)    begin        if (~reset_n_i)        begin            vx382d2 <= kd7f448;        end                else if (!ym34638)        begin            vx382d2 <= kd7f448;        end        else if (uv449ba == 0)        begin            vx382d2 <= 0;        end        else if (ym34638)        begin            vx382d2 <= uv449ba - 1;        end    end  end
endgenerate
generate        if (DPHY_RX_IP == "MIXEL") begin        assign clk_hs_o = vi76f8d;    end    else if (DPHY_RX_IP == "LATTICE") begin        assign clk_hs_o = clk_byte_o;    end        if (DPHY_RX_IP == "MIXEL") begin                        assign wlae6a5 = ohab11d | dm588ec;                if (NUM_RX_LANE == 1)            assign sjbeb5a = kqc4762[0];        else if (NUM_RX_LANE == 2)            assign sjbeb5a = &kqc4762[1:0];        else if (NUM_RX_LANE == 3)            assign sjbeb5a = &kqc4762[2:0];        else if (NUM_RX_LANE == 4)            assign sjbeb5a = &kqc4762[3:0];        assign yk46a28 = pf452af | ks15eef;        if (NUM_RX_LANE < 1)            assign ls35140 = sj2957e | ntaf778;        else if (NUM_RX_LANE < 2)            assign jea8a02 = pf4abf5 | xj7bbc6;        else if (NUM_RX_LANE < 3)            assign rt45012 = xj55fae | hbdde36;    end    else if (DPHY_RX_IP == "LATTICE") begin        always @(posedge clk_byte_o or negedge reset_byte_n_i) begin            if (~reset_byte_n_i) begin                hs_d0_en_r  <= 0;                icce9c1 <= 0;                mec11d6 <= 0;            end            else begin                hs_d0_en_r  <= tj38027;                icce9c1 <= hs_d0_en_r;                mec11d6 <= zz917cd;            end        end
                            assign sjbeb5a = hs_d0_en_r | zz917cd | blcdfb7 ; 

        assign yk46a28 = ks15eef;        if (NUM_RX_LANE > 1) begin            always @(posedge clk_byte_o or negedge reset_byte_n_i) begin                if (~reset_byte_n_i) begin                    hs_d1_en_r  <= 0;                    th74e08 <= 0;                    ux8eb0 <= 0;                end                else begin                    hs_d1_en_r  <= zkc013e;                    th74e08 <= hs_d1_en_r;                    ux8eb0 <= hd8be6f;                end            end
                                        assign qgf5ad4 = hs_d1_en_r | hd8be6f | sh6fdbf ; 

            assign ls35140 = ntaf778;        end        if (NUM_RX_LANE > 2) begin            always @(posedge clk_byte_o or negedge reset_byte_n_i) begin                if (~reset_byte_n_i) begin                    hs_d2_en_r  <= 0;                    zma7047 <= 0;                    ne47585 <= 0;                end                else begin                    hs_d2_en_r  <= sw9f2;                    zma7047 <= hs_d2_en_r;                    ne47585 <= ld5f37e;                end            end
                                        assign baad6a1 = hs_d2_en_r | ld5f37e | pf7edfd ; 

            assign jea8a02 = xj7bbc6;        end        if (NUM_RX_LANE > 3) begin            always @(posedge clk_byte_o or negedge reset_byte_n_i) begin                if (~reset_byte_n_i) begin                    hs_d3_en_r  <= 0;                    lf3823a <= 0;                    fc3ac2b <= 0;                end                else begin                    hs_d3_en_r  <= tw4f91;                    lf3823a <= hs_d3_en_r;                    fc3ac2b <= zxf9bf6;                end            end

                                      assign jp6b50b = hs_d3_en_r | zxf9bf6 | vvf6fee ; 

            assign rt45012 = hbdde36;        end    end        if (DPHY_RX_IP == "MIXEL") begin        assign bydfc79 = xl38160[RX_GEAR-1:0];        if (NUM_RX_LANE > 1)          assign zkfe3cb = fac0b06[RX_GEAR-1:0];        if (NUM_RX_LANE > 2)          assign zkf1e5b = sw5833[RX_GEAR-1:0];        if (NUM_RX_LANE > 3)          assign wl8f2db = ux2c199[RX_GEAR-1:0];    end    else if (DPHY_RX_IP == "LATTICE") begin        assign bydfc79 = fn715c7;        if (NUM_RX_LANE > 1)          assign zkfe3cb = ne571f4;        if (NUM_RX_LANE > 2)          assign zkf1e5b = dzc7d13;        if (NUM_RX_LANE > 3)          assign wl8f2db = nef44f0;    end        if (DPHY_RX_IP == "MIXEL") begin        if (WORD_ALIGN == "OFF") begin  assign hs_sync_o = offdd96 | pseecb5;	end	else if (WORD_ALIGN == "ON") begin  assign hs_sync_o = ntafd76;	end    end    else if (DPHY_RX_IP == "LATTICE") begin        assign hs_sync_o = ntafd76;    end        if (DPHY_RX_IP == "MIXEL") begin        if (WORD_ALIGN == "OFF") begin  assign bd0_o = ne4d3b8;          if (NUM_RX_LANE > 1)            assign bd1_o = kd4ee12;          if (NUM_RX_LANE > 2)            assign bd2_o = zmb84a1;          if (NUM_RX_LANE > 3)            assign bd3_o = ir12857;	end	else if (WORD_ALIGN == "ON") begin  assign bd0_o = cb120a4;          if (NUM_RX_LANE > 1)            assign bd1_o = mg82925;          if (NUM_RX_LANE > 2)            assign bd2_o = gda4942;          if (NUM_RX_LANE > 3)            assign bd3_o = je250a0;	end    end    else if (DPHY_RX_IP == "LATTICE") begin        assign bd0_o = cb120a4;        if (NUM_RX_LANE > 1)            assign bd1_o = mg82925;        if (NUM_RX_LANE > 2)            assign bd2_o = gda4942;        if (NUM_RX_LANE > 3)            assign bd3_o = je250a0;    end        if (DPHY_RX_IP == "MIXEL")    begin                assign cd_d0_o = vi52ac4 | an95623;                if (NUM_RX_LANE == 1)    begin            assign fncd569 = 0; assign uv6ab4e = 0; assign fn55a75 = 0;        end        else if (NUM_RX_LANE == 2)    begin            assign fncd569 = 1; assign uv6ab4e = 0; assign fn55a75 = 0;        end        else if (NUM_RX_LANE == 3)    begin            assign fncd569 = 1; assign uv6ab4e = 1; assign fn55a75 = 0;        end        else if (NUM_RX_LANE == 4)    begin            assign fncd569 = 1; assign uv6ab4e = 1; assign fn55a75 = 1;        end                if (RX_GEAR == 16)            assign gqb9aad = 16'hB800;        else            assign gqb9aad = 8'hB8;        always @(posedge clk_byte_fr_i or negedge reset_byte_fr_n_i)        begin            if (~reset_byte_fr_n_i) begin                ba2f32b <= 0;            end            else if (lfbfbb2 & ~offdd96) begin                ba2f32b <= kfbe352;            end            else if (offdd96) begin                ba2f32b <= fc1e4a9;            end            else begin                ba2f32b <= 0;            end        end        if (NUM_RX_LANE > 1)        begin          always @(posedge clk_byte_fr_i or negedge reset_byte_fr_n_i)          begin              if (~reset_byte_fr_n_i) begin                  dm7995a <= 0;              end              else if (lfbfbb2 & ~offdd96) begin                  dm7995a <= kfbe352;              end              else if (offdd96) begin                  dm7995a <= sw92a55;              end              else begin                  dm7995a <= 0;              end          end        end        if (NUM_RX_LANE > 2)        begin          always @(posedge clk_byte_fr_i or negedge reset_byte_fr_n_i)          begin              if (~reset_byte_fr_n_i) begin                  gbccad3 <= 0;              end              else if (lfbfbb2 & ~offdd96) begin                  gbccad3 <= kfbe352;              end              else if (offdd96) begin                  gbccad3 <= coa954d;              end              else begin                  gbccad3 <= 0;              end          end        end        if (NUM_RX_LANE > 3)        begin          always @(posedge clk_byte_fr_i or negedge reset_byte_fr_n_i)          begin              if (~reset_byte_fr_n_i) begin                  gb6569d <= 0;              end              else if (lfbfbb2 & ~offdd96) begin                  gb6569d <= kfbe352;              end              else if (offdd96) begin                  gb6569d <= nr5534e;              end              else begin                  gb6569d <= 0;              end          end        end    end
endgenerate

assign ald3b46  = reset_byte_n_i & (pseecb5|pf452af);
assign mg9da35 = reset_byte_n_i & (bnb56d3|sj2957e);
assign gbed1a8 = reset_byte_n_i & (gbd3d22|pf4abf5);
assign ui68d45 = reset_byte_n_i & (ph22bdd|xj55fae);


always @(posedge clk_byte_fr_i or negedge reset_byte_fr_n_i)
begin    if (~reset_byte_fr_n_i) begin        shd615a  <= 0;        zzb0ad4  <= 0;        wl856a7  <= 0;        uk2b53c  <= 0;    end    else begin        shd615a  <= pf452af;        zzb0ad4  <= lsb7f76;        wl856a7  <= lfbfbb2;        uk2b53c  <= offdd96;    end
end


always @(posedge clk_byte_o or negedge ald3b46)
begin    if (~ald3b46) begin        zz9eb0 <= 0;    end    else if (qgef1b6 == 2'b10) begin        zz9eb0 <= 0;    end    else if (ouaf7d) begin        zz9eb0 <= qgef1b6 + 1;    end    else begin        zz9eb0 <= 0;    end
end
always @(posedge clk_byte_o or negedge ald3b46)
begin    if (~ald3b46) begin        xj74e09 <= 0;    end    else if (pf452af) begin        xj74e09 <= 1;    end
end

always @(posedge clk_byte_fr_i or negedge reset_byte_fr_n_i)
begin    if (~reset_byte_fr_n_i) begin        dz4f587 <= 0;    end    else if (su78db0 == 2'b10) begin        dz4f587 <= 0;    end    else if (lfbfbb2 | offdd96) begin        dz4f587 <= su78db0 + 1;    end    else begin        dz4f587 <= 0;    end
end
generate    if (DPHY_RX_IP=="MIXEL") begin        if (NUM_RX_LANE > 1) begin            assign jr28096         = qgef1b6;            assign vv404b7      = su78db0;            assign wwd42f7 = lfbfbb2 | offdd96;        end        if (NUM_RX_LANE > 2) begin            assign oh25be         = qgef1b6;            assign oh12df5      = su78db0;            assign ira17b9 = lfbfbb2 | offdd96;        end        if (NUM_RX_LANE > 3) begin            assign vk96fad         = qgef1b6;            assign zmb7d6b      = su78db0;            assign hqbdcd = lfbfbb2 | offdd96;        end    end    else if (DPHY_RX_IP=="LATTICE") begin        if (NUM_RX_LANE > 1) begin            assign jr28096         = wjc6d81;            assign vv404b7      = wl36c0c;            assign wwd42f7 = twb2d5b | vk96ada;            always @(posedge clk_byte_fr_i or negedge reset_byte_fr_n_i)            begin                if (~reset_byte_fr_n_i) begin                    bl5a9e0  <= 0;                    ykd4f07  <= 0;                    twa7838  <= 0;                    sj3c1c3  <= 0;                end                else begin                    bl5a9e0  <= sj2957e;                    ykd4f07  <= ps765ab;                    twa7838  <= twb2d5b;                    sj3c1c3  <= vk96ada;                end            end            always @(posedge clk_byte_o or negedge mg9da35)            begin                if (~mg9da35) begin                    ip7ac3f <= 0;                end                else if (wjc6d81 == 2'b10) begin                    ip7ac3f <= 0;                end                else if (ne57be8) begin                    ip7ac3f <= wjc6d81 + 1;                end                else begin                    ip7ac3f <= 0;                end            end
                        always @(posedge clk_byte_o or negedge mg9da35)            begin                if (~mg9da35) begin                    fca704f <= 0;                end                else if (sj2957e) begin                    fca704f <= 1;                end            end            always @(posedge clk_byte_fr_i or negedge reset_byte_fr_n_i)            begin                if (~reset_byte_fr_n_i) begin                    qtd61fc <= 0;                end                else if (wl36c0c == 2'b10) begin                    qtd61fc <= 0;                end                else if (bl7ebb7) begin                    qtd61fc <= wl36c0c + 1;                end                else begin                    qtd61fc <= 0;                end            end        end        if (NUM_RX_LANE > 2) begin            assign oh25be         = swb6064;            assign oh12df5      = tjb0321;            assign ira17b9 = ip5b4f4 | zkda7a4;            always @(posedge clk_byte_fr_i or negedge reset_byte_fr_n_i)            begin                if (~reset_byte_fr_n_i) begin                    qge0e1c  <= 0;                    qv70e0  <= 0;                    fp38705  <= 0;                    shc382e  <= 0;                end                else begin                    qge0e1c  <= pf4abf5;                    qv70e0  <= irab69e;                    fp38705  <= ip5b4f4;                    shc382e  <= zkda7a4;                end            end
            always @(posedge clk_byte_o or negedge gbed1a8)            begin                if (~gbed1a8) begin                    jrb0fe4 <= 0;                end                else if (swb6064 == 2'b10) begin                    jrb0fe4 <= 0;                end                else if (ngbdf43) begin                    jrb0fe4 <= swb6064 + 1;                end                else begin                    jrb0fe4 <= 0;                end            end
                        always @(posedge clk_byte_o or negedge gbed1a8)            begin                if (~gbed1a8) begin                    hd3827a <= 0;                end                else if (pf4abf5) begin                    hd3827a <= 1;                end            end            always @(posedge clk_byte_fr_i or negedge reset_byte_fr_n_i)            begin                if (~reset_byte_fr_n_i) begin                    wy87f27 <= 0;                end                else if (tjb0321 == 2'b10) begin                    wy87f27 <= 0;                end                else if (kqf5dbe) begin                    wy87f27 <= tjb0321 + 1;                end                else begin                    wy87f27 <= 0;                end            end        end        if (NUM_RX_LANE > 3) begin            assign vk96fad         = xl8190e;            assign zmb7d6b      = jrc877;            assign hqbdcd = byf48af | mta457b;            always @(posedge clk_byte_fr_i or negedge reset_byte_fr_n_i)            begin                if (~reset_byte_fr_n_i) begin                    rv1c174  <= 0;                    wwe0ba7  <= 0;                    ks5d38  <= 0;                    gq2e9c1  <= 0;                end                else begin                    rv1c174  <= xj55fae;                    wwe0ba7  <= lf9e915;                    ks5d38  <= byf48af;                    gq2e9c1  <= mta457b;                end            end            always @(posedge clk_byte_o or negedge ui68d45)            begin                if (~ui68d45) begin                    vk3f938 <= 0;                end                else if (xl8190e == 2'b10) begin                    vk3f938 <= 0;                end                else if (goefa1b) begin                    vk3f938 <= xl8190e + 1;                end                else begin                    vk3f938 <= 0;                end            end
                        always @(posedge clk_byte_o or negedge ui68d45)            begin                if (~ui68d45) begin                    goc13d6 <= 0;                end                else if (xj55fae) begin                    goc13d6 <= 1;                end            end            always @(posedge clk_byte_fr_i or negedge reset_byte_fr_n_i)            begin                if (~reset_byte_fr_n_i) begin                    rtfc9c2 <= 0;                end                else if (jrc877 == 2'b10) begin                    rtfc9c2 <= 0;                end                else if (gdaedf1) begin                    rtfc9c2 <= jrc877 + 1;                end                else begin                    rtfc9c2 <= 0;                end            end        end    end
endgenerate


always @(posedge clk_byte_o or negedge reset_byte_n_i)
begin    if (~reset_byte_n_i) begin        tj270ba <= 0;        ald6da6 <= 0;        ng35029 <= 0;    end    else begin        case (qgef1b6)            2'b00:   tj270ba <= lf13c12;            2'b01:   ald6da6 <= lf13c12;            2'b10:   ng35029 <= lf13c12;            default: tj270ba <= lf13c12;        endcase    end
end
always @(posedge clk_byte_fr_i or negedge reset_byte_fr_n_i)
begin    if (~reset_byte_fr_n_i) begin        rt4a7c5 <= 0;    end    else if (lfbfbb2 | offdd96) begin        case (su78db0)            2'b00:   rt4a7c5 <= ie21dff;            2'b01:   rt4a7c5 <= tw86338;            2'b10:   rt4a7c5 <= jc58d79;            default: rt4a7c5 <= ie21dff;        endcase    end
end

generate  if (NUM_RX_LANE > 1)  begin    always @(posedge clk_byte_o or negedge reset_byte_n_i)    begin        if (~reset_byte_n_i) begin            ph385d6 <= 0;            mgb6d35 <= 0;            zma814a <= 0;        end        else begin            case (ui7d0d9)                2'b00:   ph385d6 <= eaf04be;                2'b01:   mgb6d35 <= eaf04be;                2'b10:   zma814a <= eaf04be;                default: ph385d6 <= eaf04be;            endcase        end    end    always @(posedge clk_byte_fr_i or negedge reset_byte_fr_n_i)    begin        if (~reset_byte_fr_n_i) begin            os53e2f <= 0;        end        else if (bl7ebb7) begin            case (ipe86c8)                2'b00:   os53e2f <= cm77fc2;                2'b01:   os53e2f <= do8ce19;                2'b10:   os53e2f <= ng35e54;                default: os53e2f <= cm77fc2;            endcase        end    end  end
  if (NUM_RX_LANE > 2)  begin    always @(posedge clk_byte_o or negedge reset_byte_n_i)    begin        if (~reset_byte_n_i) begin            vvc2eb6 <= 0;            qib69a8 <= 0;            th40a53 <= 0;        end        else begin            case (kq43645)                2'b00:   vvc2eb6 <= mt12f81;                2'b01:   qib69a8 <= mt12f81;                2'b10:   th40a53 <= mt12f81;                default: vvc2eb6 <= mt12f81;            endcase        end    end    always @(posedge clk_byte_fr_i or negedge reset_byte_fr_n_i)    begin        if (~reset_byte_fr_n_i) begin            wl9f179 <= 0;        end        else if (kqf5dbe) begin            case (hq1b229)                2'b00:   wl9f179 <= icff086;                2'b01:   wl9f179 <= ph38658;                2'b10:   wl9f179 <= jc7951e;                default: wl9f179 <= icff086;            endcase        end    end  end
  if (NUM_RX_LANE > 3)  begin    always @(posedge clk_byte_o or negedge reset_byte_n_i)    begin        if (~reset_byte_n_i) begin            oh175b6 <= 0;            yzb4d40 <= 0;            aa529f <= 0;        end        else begin            case (shd914a)                2'b00:   oh175b6 <= uxbe069;                2'b01:   yzb4d40 <= uxbe069;                2'b10:   aa529f <= uxbe069;                default: oh175b6 <= uxbe069;            endcase        end    end    always @(posedge clk_byte_fr_i or negedge reset_byte_fr_n_i)    begin        if (~reset_byte_fr_n_i) begin            ipf8bcc <= 0;        end        else if (gdaedf1) begin            case (hbc8a55)                2'b00:   ipf8bcc <= jpc218c;                2'b01:   ipf8bcc <= lf19635;                2'b10:   ipf8bcc <= ip54792;                default: ipf8bcc <= jpc218c;            endcase        end    end  end
endgenerate

always @(posedge clk_byte_fr_i or negedge reset_byte_fr_n_i)
begin    if (~reset_byte_fr_n_i) begin        sj12d19  <= 0;        ba968cd  <= 0;        wlb466b  <= 0;        swa335c  <= 0;    end    else begin        sj12d19  <= ym34638;        ba968cd  <= ks1f4fe;        wlb466b  <= osfa7f0;        swa335c  <= qtd3f81;    end
end


always @(posedge clk_byte_fr_i or negedge reset_byte_fr_n_i)
begin  if (RX_GEAR == 8) begin    if ((qtd3f81) || (mt9fc0d)) begin        hd19ae0 <= 1'b1;    end    else begin        hd19ae0 <= 1'b0;    end  end  else begin    if ((osfa7f0) || (qtd3f81) || (mt9fc0d)) begin        hd19ae0 <= 1'b1;    end    else begin        hd19ae0 <= 1'b0;    end  end
end

always @(posedge clk_byte_fr_i or negedge reset_byte_fr_n_i)
begin    if (~reset_byte_fr_n_i) begin        dz6b836  <= 0;        ww5c1b7  <= 0;	kqe0db9  <= 0;        vx6dc8  <= 0;	oh36e46  <= 0;        hqb7234  <= 0;	gqb91a3  <= 0;        blc8d18  <= 0;    end    else begin        dz6b836  <= xl38160;        ww5c1b7  <= bn81b58;	kqe0db9  <= fac0b06;        vx6dc8  <= ne58f4e;	oh36e46  <= sw5833;        hqb7234  <= en4e5b6;	gqb91a3  <= ux2c199;        blc8d18  <= wyb6a18;    end
end


generate  if ((WORD_ALIGN == "ON") && (DPHY_RX_IP == "MIXEL")) begin    assign gdabb02    =  qg6d63d;	assign vi5d815    =  tj3d396;	assign blec0aa    =  hq96da8;	assign ip60557    =  lsa8606;	assign ir2abd =  jcfe06d; 	assign mg155ec =  jcfe06d; 	assign hdaaf61 =  jcfe06d; 	assign dm57b0f =  jcfe06d;   end  else begin    assign gdabb02    =  fc1e4a9;	assign vi5d815    =  sw92a55;	assign blec0aa    =  coa954d;	assign ip60557    =  nr5534e;	assign ir2abd =  offdd96;	assign mg155ec =  vk96ada;	assign hdaaf61 =  zkda7a4;	assign dm57b0f =  mta457b;  end
endgenerate
generate    if (DPHY_RX_IP == "MIXEL")    begin : zz8ba36        MIPIDPHYA #(            .HSEL          (RX_GEAR/8-1),              .HS_16BIT_EN   (RX_GEAR/8-1),              .CN            (5'd0),            .CM            (8'd0),            .CO            (2'd0),


`ifdef WORD_ALIGN
            .ENP_DESER     (1'd1),


`else
            .ENP_DESER     (1'd0),


`endif
            .PLL_TST       (4'd9)        )        yk46d9c (
            .CKP           (clk_p_i),            .CKN           (clk_n_i),            .CLKHSBYTE     (kd5ee6a),                    .CLKRXHSEN     (term_clk_en_i),            .CLKRXLPEN     (~term_clk_en_i),            .CLKDRXLPP     (lp_clk_rx_p_o),            .CLKDRXLPN     (lp_clk_rx_n_o),            .CLKCDEN       (1'b1),            .CLKDCDN       (cd_clk_o),            .CLKTXLPEN     (1'b0),            .CLKDTXLPP     (1'b0),            .CLKDTXLPN     (1'b0),            .CLKTXHSEN     (1'b0),            .CLKTXHSGATE   (1'b0),            .CLKTXHSPD     (1'b1),            .CLKDRXHS      (),            .HSBYTECLKD    (clk_byte_o),                .HSBYTECLKS    (),
            .LBEN          (1'b0),                    .PDDPHY        (~reset_n_i),              .PDBIAS        (1'b0),              .PDCKG         (1'b0),  
            .CLKREF        (1'b0),            .LOCK          (),            .PDPLL         (1'b1),
            .DP0           (d0_p_io),            .DN0           (d0_n_io),            .D0RXLPEN      (~lp_d0_tx_en_i),            .D0DRXLPP      (lp_d0_rx_p_o),            .D0DRXLPN      (lp_d0_rx_n_o),            .D0CDEN        (1'b1),                    .D0DCDP        (xyad3ae),                 .D0DCDN        (by69d73),                 .D0TXLPEN      (lp_d0_tx_en_i),            .D0DTXLPP      (lp_d0_tx_p_i),            .D0DTXLPN      (lp_d0_tx_n_i),            .D0RXHSEN      (term_d0_en_i),            .D0HSRXDATA15  (lq63a35[15]),            .D0HSRXDATA14  (lq63a35[14]),            .D0HSRXDATA13  (lq63a35[13]),            .D0HSRXDATA12  (lq63a35[12]),            .D0HSRXDATA11  (lq63a35[11]),            .D0HSRXDATA10  (lq63a35[10]),            .D0HSRXDATA9   (lq63a35[9]),            .D0HSRXDATA8   (lq63a35[8]),            .D0HSRXDATA7   (lq63a35[7]),            .D0HSRXDATA6   (lq63a35[6]),            .D0HSRXDATA5   (lq63a35[5]),            .D0HSRXDATA4   (lq63a35[4]),            .D0HSRXDATA3   (lq63a35[3]),            .D0HSRXDATA2   (lq63a35[2]),            .D0HSRXDATA1   (lq63a35[1]),            .D0HSRXDATA0   (lq63a35[0]),            .D0SYNC        (en4eb9a[0]),              .D0ERRSYNC     (mr75cd4[0]),             .D0NOSYNC      (),              	.D0HSDESEREN   (qgd4538 & term_d0_en_i),            .D0TXHSEN      (1'b0),            .D0HSTXDATA15  (1'b0),            .D0HSTXDATA14  (1'b0),            .D0HSTXDATA13  (1'b0),            .D0HSTXDATA12  (1'b0),            .D0HSTXDATA11  (1'b0),            .D0HSTXDATA10  (1'b0),            .D0HSTXDATA9   (1'b0),            .D0HSTXDATA8   (1'b0),            .D0HSTXDATA7   (1'b0),            .D0HSTXDATA6   (1'b0),            .D0HSTXDATA5   (1'b0),            .D0HSTXDATA4   (1'b0),            .D0HSTXDATA3   (1'b0),            .D0HSTXDATA2   (1'b0),            .D0HSTXDATA1   (1'b0),            .D0HSTXDATA0   (1'b0),            .D0HSSEREN     (1'b0),            .D0TXHSPD      (1'b1),              .D0DRXHS       (),
            .DP1           (d1_p_i),            .DN1           (d1_n_i),            .D1RXLPEN      (1'b0),            .D1DRXLPP      (lp_d1_rx_p_o),            .D1DRXLPN      (lp_d1_rx_n_o),            .D1CDEN        (1'b0),                .D1DCDP        (),                    .D1DCDN        (),                    .D1TXLPEN      (1'b0),            .D1DTXLPP      (1'b0),            .D1DTXLPN      (1'b0),            .D1RXHSEN      (term_d1_en_i & fncd569),            .D1HSRXDATA15  (gd1d1ab[15]),            .D1HSRXDATA14  (gd1d1ab[14]),            .D1HSRXDATA13  (gd1d1ab[13]),            .D1HSRXDATA12  (gd1d1ab[12]),            .D1HSRXDATA11  (gd1d1ab[11]),            .D1HSRXDATA10  (gd1d1ab[10]),            .D1HSRXDATA9   (gd1d1ab[9]),            .D1HSRXDATA8   (gd1d1ab[8]),            .D1HSRXDATA7   (gd1d1ab[7]),            .D1HSRXDATA6   (gd1d1ab[6]),            .D1HSRXDATA5   (gd1d1ab[5]),            .D1HSRXDATA4   (gd1d1ab[4]),            .D1HSRXDATA3   (gd1d1ab[3]),            .D1HSRXDATA2   (gd1d1ab[2]),            .D1HSRXDATA1   (gd1d1ab[1]),            .D1HSRXDATA0   (gd1d1ab[0]),            .D1SYNC        (en4eb9a[1]),              .D1ERRSYNC     (mr75cd4[1]),             .D1NOSYNC      (),                  .D1HSDESEREN   (qgd4538 & term_d1_en_i & fncd569),            .D1TXHSEN      (1'b0),            .D1HSTXDATA15  (1'b0),            .D1HSTXDATA14  (1'b0),            .D1HSTXDATA13  (1'b0),            .D1HSTXDATA12  (1'b0),            .D1HSTXDATA11  (1'b0),            .D1HSTXDATA10  (1'b0),            .D1HSTXDATA9   (1'b0),            .D1HSTXDATA8   (1'b0),            .D1HSTXDATA7   (1'b0),            .D1HSTXDATA6   (1'b0),            .D1HSTXDATA5   (1'b0),            .D1HSTXDATA4   (1'b0),            .D1HSTXDATA3   (1'b0),            .D1HSTXDATA2   (1'b0),            .D1HSTXDATA1   (1'b0),            .D1HSTXDATA0   (1'b0),            .D1HSSEREN     (1'b0),            .D1TXHSPD      (1'b1),	            .D1DRXHS       (),
            .DP2           (d2_p_i),            .DN2           (d2_n_i),            .D2RXLPEN      (1'b0),            .D2DRXLPP      (lp_d2_rx_p_o),            .D2DRXLPN      (lp_d2_rx_n_o),            .D2CDEN        (1'b0),                .D2DCDP        (),                    .D2DCDN        (),                    .D2TXLPEN      (1'b0),            .D2DTXLPP      (1'b0),            .D2DTXLPN      (1'b0),            .D2RXHSEN      (term_d2_en_i & uv6ab4e),            .D2HSRXDATA15  (ofe8d5d[15]),            .D2HSRXDATA14  (ofe8d5d[14]),            .D2HSRXDATA13  (ofe8d5d[13]),            .D2HSRXDATA12  (ofe8d5d[12]),            .D2HSRXDATA11  (ofe8d5d[11]),            .D2HSRXDATA10  (ofe8d5d[10]),            .D2HSRXDATA9   (ofe8d5d[9]),            .D2HSRXDATA8   (ofe8d5d[8]),            .D2HSRXDATA7   (ofe8d5d[7]),            .D2HSRXDATA6   (ofe8d5d[6]),            .D2HSRXDATA5   (ofe8d5d[5]),            .D2HSRXDATA4   (ofe8d5d[4]),            .D2HSRXDATA3   (ofe8d5d[3]),            .D2HSRXDATA2   (ofe8d5d[2]),            .D2HSRXDATA1   (ofe8d5d[1]),            .D2HSRXDATA0   (ofe8d5d[0]),            .D2SYNC        (en4eb9a[2]),              .D2ERRSYNC     (mr75cd4[2]),             .D2NOSYNC      (),                          .D2HSDESEREN   (qgd4538 & term_d2_en_i & uv6ab4e),            .D2TXHSEN      (1'b0),            .D2HSTXDATA15  (1'b0),            .D2HSTXDATA14  (1'b0),            .D2HSTXDATA13  (1'b0),            .D2HSTXDATA12  (1'b0),            .D2HSTXDATA11  (1'b0),            .D2HSTXDATA10  (1'b0),            .D2HSTXDATA9   (1'b0),            .D2HSTXDATA8   (1'b0),            .D2HSTXDATA7   (1'b0),            .D2HSTXDATA6   (1'b0),            .D2HSTXDATA5   (1'b0),            .D2HSTXDATA4   (1'b0),            .D2HSTXDATA3   (1'b0),            .D2HSTXDATA2   (1'b0),            .D2HSTXDATA1   (1'b0),            .D2HSTXDATA0   (1'b0),            .D2HSSEREN     (1'b0),            .D2TXHSPD      (1'b1),	            .D2DRXHS       (),
            .DP3           (d3_p_i),            .DN3           (d3_n_i),            .D3RXLPEN      (1'b0),            .D3DRXLPP      (lp_d3_rx_p_o),            .D3DRXLPN      (lp_d3_rx_n_o),            .D3CDEN        (1'b0),                .D3DCDP        (),                    .D3DCDN        (),                    .D3TXLPEN      (1'b0),            .D3DTXLPP      (1'b0),            .D3DTXLPN      (1'b0),            .D3RXHSEN      (term_d3_en_i & fn55a75),            .D3HSRXDATA15  (cm46aec[15]),            .D3HSRXDATA14  (cm46aec[14]),            .D3HSRXDATA13  (cm46aec[13]),            .D3HSRXDATA12  (cm46aec[12]),            .D3HSRXDATA11  (cm46aec[11]),            .D3HSRXDATA10  (cm46aec[10]),            .D3HSRXDATA9   (cm46aec[9]),            .D3HSRXDATA8   (cm46aec[8]),            .D3HSRXDATA7   (cm46aec[7]),            .D3HSRXDATA6   (cm46aec[6]),            .D3HSRXDATA5   (cm46aec[5]),            .D3HSRXDATA4   (cm46aec[4]),            .D3HSRXDATA3   (cm46aec[3]),            .D3HSRXDATA2   (cm46aec[2]),            .D3HSRXDATA1   (cm46aec[1]),            .D3HSRXDATA0   (cm46aec[0]),            .D3SYNC        (en4eb9a[3]),              .D3ERRSYNC     (mr75cd4[3]),             .D3NOSYNC      (),                  .D3HSDESEREN   (qgd4538 & term_d3_en_i & fn55a75),            .D3TXHSEN      (1'b0),            .D3HSTXDATA15  (1'b0),            .D3HSTXDATA14  (1'b0),            .D3HSTXDATA13  (1'b0),            .D3HSTXDATA12  (1'b0),            .D3HSTXDATA11  (1'b0),            .D3HSTXDATA10  (1'b0),            .D3HSTXDATA9   (1'b0),            .D3HSTXDATA8   (1'b0),            .D3HSTXDATA7   (1'b0),            .D3HSTXDATA6   (1'b0),            .D3HSTXDATA5   (1'b0),            .D3HSTXDATA4   (1'b0),            .D3HSTXDATA3   (1'b0),            .D3HSTXDATA2   (1'b0),            .D3HSTXDATA1   (1'b0),            .D3HSTXDATA0   (1'b0),            .D3HSSEREN     (1'b0),            .D3TXHSPD      (1'b1),	            .D3DRXHS       ()        );
    end    else if (DPHY_RX_IP == "LATTICE")    begin : xy2fd93        soft_dphy_rx #(            .RX_GEAR     (RX_GEAR),            .NUM_RX_LANE (NUM_RX_LANE)        )        bab26f7 (            .reset_n_i      (reset_n_i),            .clk_p_i        (clk_p_i),            .clk_n_i        (clk_n_i),            .d0_p_io        (d0_p_io),            .d0_n_io        (d0_n_io),            .d1_p_i         (d1_p_i),            .d1_n_i         (d1_n_i),            .d2_p_i         (d2_p_i),            .d2_n_i         (d2_n_i),            .d3_p_i         (d3_p_i),            .d3_n_i         (d3_n_i),            .hs_clk_en_i    (term_clk_en_i),            .hs_d0_en_i     (term_d0_en_i),            .hs_d1_en_i     (term_d1_en_i),            .hs_d2_en_i     (term_d2_en_i),            .hs_d3_en_i     (term_d3_en_i),            .lp_d0_tx_en_i  (lp_d0_tx_en_i),            .lp_d0_tx_p_i   (lp_d0_tx_p_i),            .lp_d0_tx_n_i   (lp_d0_tx_n_i),            .clk_byte_o     (clk_byte_o),            .bd0_o          (thec3db[RX_GEAR-1:0]),            .bd1_o          (xj61edf[RX_GEAR-1:0]),            .bd2_o          (swf6fe[RX_GEAR-1:0]),            .bd3_o          (zx7b7f1[RX_GEAR-1:0]),            .lp_clk_rx_p_o  (lp_clk_rx_p_o),            .lp_clk_rx_n_o  (lp_clk_rx_n_o),            .lp_d0_rx_p_o   (lp_d0_rx_p_o),            .lp_d0_rx_n_o   (lp_d0_rx_n_o),            .lp_d1_rx_p_o   (lp_d1_rx_p_o),            .lp_d1_rx_n_o   (lp_d1_rx_n_o),            .lp_d2_rx_p_o   (lp_d2_rx_p_o),            .lp_d2_rx_n_o   (lp_d2_rx_n_o),            .lp_d3_rx_p_o   (lp_d3_rx_p_o),            .lp_d3_rx_n_o   (lp_d3_rx_n_o),            .cd_clk_o       (cd_clk_o),            .cd_d0_o        (cd_d0_o)        );    end
endgenerate

generate	if (WORD_ALIGN == "ON") begin        jc6c7dc # (    .DPHY_RX_IP  (DPHY_RX_IP),            .RX_GEAR     (RX_GEAR),            .NUM_RX_LANE (NUM_RX_LANE),            .BYTECLK_MHZ (BYTECLK_MHZ)        )	mr6f4ee (    .reset_n_i        (reset_byte_fr_n_i),            .zm1b0ae       (clk_byte_fr_i),            .co97c20            (zz666c),            .mef080d            (ng99b3d),            .do2034e            (zk6cf57),            .cbd39b            (ph3d5d1),            .hbd8572         (sueae8e),            .xjc2b97         (ne57471),            .co15cbe         (lfba38a),            .anae5f0         (qgd1c57),            .bd0_o            (aycb6ea),            .bd1_o            (kd5b751),            .bd2_o            (osdba8c),            .bd3_o            (bldd461),            .zx5fb4d    (),            .kdfda6f  (qgc4589),            .kded37d  (bn22c48),            .by69bed  (fp16247),            .dm4df6a  (yzb123e),            .hs_sync_o        (yk788b1)	);    end
endgenerate

generate        if (LANE_ALIGN == "ON") begin          ym21248 #(              .RX_GEAR     (RX_GEAR),              .NUM_RX_LANE (NUM_RX_LANE),              .FIFO_DEPTH  (FIFO_DEPTH),              .FIFO_TYPE0  (FIFO_TYPE0),              .FIFO_TYPE1  (FIFO_TYPE1),              .FIFO_TYPE2  (FIFO_TYPE2),              .FIFO_TYPE3  (FIFO_TYPE3)          )          ne76ca6 (              .ir2ae4            (clk_byte_fr_i),              .ep8055c          (~reset_byte_fr_n_i),              .co97c20            (db81a68),              .mef080d            (lq69a3c),              .do2034e            (su68f12),              .cbd39b            (wl3c482),              .fa42221          (fa4281f),              .tw1110b          (pu140fa),              .ie8885b          (fpa07d3),              .wj442d9          (lf3e9f),              .uk216cc           (rv28503),              .bd0_o            (gb51878),              .bd1_o            (fc8c3c4),              .bd2_o            (vv61e22),              .bd3_o            (cof116),              .hs_sync_o        (rt5a85e)          );       end       else begin           assign gb51878     = db81a68;           assign fc8c3c4     = lq69a3c;           assign vv61e22     = su68f12;           assign cof116     = wl3c482;           assign rt5a85e = rv28503;       end
endgenerate
always@* begin qg468c7<=wyff39[0];ym34638<=wyff39[1];iea31c0<=wyff39[2];ep18e00<=wyff39[3];vvc7004<=wyff39[4];tj38027<=wyff39[5];zkc013e<=wyff39[6];sw9f2<=wyff39[7];tw4f91<=wyff39[8];db27c8b<=wyff39[9];sw3e45f<=wyff39[10];wjf22f9<=wyff39[11];zz917cd<=wyff39[12];hd8be6f<=wyff39[13];ld5f37e<=wyff39[14];zxf9bf6<=wyff39[15];blcdfb7<=wyff39[16];sh6fdbf<=wyff39[17];pf7edfd<=wyff39[18];vvf6fee<=wyff39[19];lsb7f76<=wyff39[20];lfbfbb2<=wyff39[21];offdd96<=wyff39[22];pseecb5<=wyff39[23];ps765ab<=wyff39[24];twb2d5b<=wyff39[25];vk96ada<=wyff39[26];bnb56d3<=wyff39[27];irab69e<=wyff39[28];ip5b4f4<=wyff39[29];zkda7a4<=wyff39[30];gbd3d22<=wyff39[31];lf9e915<=wyff39[32];byf48af<=wyff39[33];mta457b<=wyff39[34];ph22bdd<=wyff39[35];ks15eef<=wyff39[36];ntaf778<=wyff39[37];xj7bbc6<=wyff39[38];hbdde36<=wyff39[39];qgef1b6<={zz9eb0>>1,wyff39[40]};su78db0<={dz4f587>>1,wyff39[41]};wjc6d81<={ip7ac3f>>1,wyff39[42]};wl36c0c<={qtd61fc>>1,wyff39[43]};swb6064<={jrb0fe4>>1,wyff39[44]};tjb0321<={wy87f27>>1,wyff39[45]};xl8190e<={vk3f938>>1,wyff39[46]};jrc877<={rtfc9c2>>1,wyff39[47]};ie21dff<={tj270ba>>1,wyff39[48]};cm77fc2<={ph385d6>>1,wyff39[49]};icff086<={vvc2eb6>>1,wyff39[50]};jpc218c<={oh175b6>>1,wyff39[51]};tw86338<={ald6da6>>1,wyff39[52]};do8ce19<={mgb6d35>>1,wyff39[53]};ph38658<={qib69a8>>1,wyff39[54]};lf19635<={yzb4d40>>1,wyff39[55]};jc58d79<={ng35029>>1,wyff39[56]};ng35e54<={zma814a>>1,wyff39[57]};jc7951e<={th40a53>>1,wyff39[58]};ip54792<={aa529f>>1,wyff39[59]};fc1e4a9<={rt4a7c5>>1,wyff39[60]};sw92a55<={os53e2f>>1,wyff39[61]};coa954d<={wl9f179>>1,wyff39[62]};nr5534e<={ipf8bcc>>1,wyff39[63]};ne4d3b8<={ba2f32b>>1,wyff39[64]};kd4ee12<={dm7995a>>1,wyff39[65]};zmb84a1<={gbccad3>>1,wyff39[66]};ir12857<={gb6569d>>1,wyff39[67]};wjc9544<=wyff39[68];uv449ba<={vx382d2>>1,wyff39[69]};ouaf7d<=wyff39[70];ne57be8<=wyff39[71];ngbdf43<=wyff39[72];goefa1b<=wyff39[73];ui7d0d9<={jr28096>>1,wyff39[74]};ipe86c8<={vv404b7>>1,wyff39[75]};kq43645<={oh25be>>1,wyff39[76]};hq1b229<={oh12df5>>1,wyff39[77]};shd914a<={vk96fad>>1,wyff39[78]};hbc8a55<={zmb7d6b>>1,wyff39[79]};pf452af<=wyff39[80];sj2957e<=wyff39[81];pf4abf5<=wyff39[82];xj55fae<=wyff39[83];ntafd76<=wyff39[84];bl7ebb7<=wyff39[85];kqf5dbe<=wyff39[86];gdaedf1<=wyff39[87];vi76f8d<=wyff39[88];kfbe352<={gqb9aad>>1,wyff39[89]};jcf1a95<=wyff39[90];wy8d4ab<=wyff39[91];al6a558<=wyff39[92];vi52ac4<=wyff39[93];an95623<=wyff39[94];ohab11d<={en4eb9a>>1,wyff39[95]};dm588ec<={mr75cd4>>1,wyff39[96]};kqc4762<={wlae6a5>>1,wyff39[97]};cb1d885<={ux9a963>>1,wyff39[98]};me62167<={uid4b1d>>1,wyff39[99]};wl859c0<={pha58e8>>1,wyff39[100]};ui6702c<={ir2c746>>1,wyff39[101]};xl38160<={lq63a35>>1,wyff39[102]};fac0b06<={gd1d1ab>>1,wyff39[103]};sw5833<={ofe8d5d>>1,wyff39[104]};ux2c199<={cm46aec>>1,wyff39[105]};zz666c<={gdabb02>>1,wyff39[106]};ng99b3d<={vi5d815>>1,wyff39[107]};zk6cf57<={blec0aa>>1,wyff39[108]};ph3d5d1<={ip60557>>1,wyff39[109]};sueae8e<=wyff39[110];ne57471<=wyff39[111];lfba38a<=wyff39[112];qgd1c57<=wyff39[113];fn715c7<={thec3db>>1,wyff39[114]};ne571f4<={xj61edf>>1,wyff39[115]};dzc7d13<={swf6fe>>1,wyff39[116]};nef44f0<={zx7b7f1>>1,wyff39[117]};lf13c12<={bydfc79>>1,wyff39[118]};eaf04be<={zkfe3cb>>1,wyff39[119]};mt12f81<={zkf1e5b>>1,wyff39[120]};uxbe069<={wl8f2db>>1,wyff39[121]};db81a68<={aycb6ea>>1,wyff39[122]};lq69a3c<={kd5b751>>1,wyff39[123]};su68f12<={osdba8c>>1,wyff39[124]};wl3c482<={bldd461>>1,wyff39[125]};cb120a4<={gb51878>>1,wyff39[126]};mg82925<={fc8c3c4>>1,wyff39[127]};gda4942<={vv61e22>>1,wyff39[128]};je250a0<={cof116>>1,wyff39[129]};rv28503<=wyff39[130];fa4281f<=wyff39[131];pu140fa<=wyff39[132];fpa07d3<=wyff39[133];lf3e9f<=wyff39[134];ks1f4fe<=wyff39[135];osfa7f0<=wyff39[136];qtd3f81<=wyff39[137];mt9fc0d<=wyff39[138];jcfe06d<=wyff39[139];bn81b58<={dz6b836>>1,wyff39[140]};qg6d63d<={ww5c1b7>>1,wyff39[141]};ne58f4e<={kqe0db9>>1,wyff39[142]};tj3d396<={vx6dc8>>1,wyff39[143]};en4e5b6<={oh36e46>>1,wyff39[144]};hq96da8<={hqb7234>>1,wyff39[145]};wyb6a18<={gqb91a3>>1,wyff39[146]};lsa8606<={blc8d18>>1,wyff39[147]};end
always@* begin mec1fe7[2047]<=term_d0_en_i;mec1fe7[2046]<=term_d1_en_i;mec1fe7[2044]<=term_d2_en_i;mec1fe7[2040]<=term_d3_en_i;mec1fe7[2032]<=hs_d0_en_i;mec1fe7[2028]<=fn55a75;mec1fe7[2017]<=hs_d1_en_i;mec1fe7[2008]<=xyad3ae;mec1fe7[1988]<=vv404b7[0];mec1fe7[1987]<=hs_d2_en_i;mec1fe7[1969]<=by69d73;mec1fe7[1928]<=oh25be[0];mec1fe7[1926]<=hs_d3_en_i;mec1fe7[1891]<=en4eb9a[0];mec1fe7[1866]<=zx7b7f1[0];mec1fe7[1842]<=hd19ae0;mec1fe7[1809]<=oh12df5[0];mec1fe7[1805]<=gq2e9c1;mec1fe7[1804]<=lp_d0_tx_en_i;mec1fe7[1803]<=uk2b53c;mec1fe7[1761]<=rv1c174;mec1fe7[1748]<=os53e2f[0];mec1fe7[1734]<=mr75cd4[0];mec1fe7[1727]<=hqbdcd;mec1fe7[1696]<=ba2f32b[0];mec1fe7[1684]<=bydfc79[0];mec1fe7[1668]<=ip7ac3f[0];mec1fe7[1636]<=dz6b836[0];mec1fe7[1633]<=ofe8d5d[0];mec1fe7[1607]<=oh36e46[0];mec1fe7[1587]<=uid4b1d[0];mec1fe7[1571]<=vk96fad[0];mec1fe7[1562]<=xj74e09;mec1fe7[1560]<=lp_d0_tx_p_i;mec1fe7[1558]<=bl5a9e0;mec1fe7[1555]<=blec0aa[0];mec1fe7[1550]<=mec11d6;mec1fe7[1531]<=fncd569;mec1fe7[1484]<=wlb466b;mec1fe7[1475]<=wwe0ba7;mec1fe7[1464]<=fp38705;mec1fe7[1448]<=wl9f179[0];mec1fe7[1420]<=wlae6a5[0];mec1fe7[1406]<=kd5ee6a;mec1fe7[1395]<=sj12d19;mec1fe7[1345]<=dm7995a[0];mec1fe7[1323]<=yk788b1;mec1fe7[1320]<=zkfe3cb[0];mec1fe7[1300]<=osdba8c[0];mec1fe7[1288]<=qtd61fc[0];mec1fe7[1287]<=gb6569d[0];mec1fe7[1257]<=thec3db[0];mec1fe7[1242]<=th40a53[0];mec1fe7[1224]<=ww5c1b7[0];mec1fe7[1218]<=cm46aec[0];mec1fe7[1198]<=bn22c48;mec1fe7[1186]<=wl8f2db[0];mec1fe7[1167]<=hqb7234[0];mec1fe7[1131]<=jp6b50b;mec1fe7[1126]<=pha58e8[0];mec1fe7[1106]<=gb51878[0];mec1fe7[1094]<=zmb7d6b[0];mec1fe7[1076]<=fca704f;mec1fe7[1072]<=lp_d0_tx_n_i;mec1fe7[1069]<=ykd4f07;mec1fe7[1063]<=ip60557[0];mec1fe7[1056]<=wy87f27[0];mec1fe7[1055]<=vx382d2[0];mec1fe7[1052]<=ux8eb0;mec1fe7[1028]<=vvc2eb6[0];mec1fe7[1023]<=term_clk_en_i;mec1fe7[1014]<=uv6ab4e;mec1fe7[994]<=jr28096[0];mec1fe7[933]<=swf6fe[0];mec1fe7[921]<=swa335c;mec1fe7[902]<=ks5d38;mec1fe7[901]<=wl856a7;mec1fe7[880]<=shc382e;mec1fe7[874]<=rt4a7c5[0];mec1fe7[863]<=ira17b9;mec1fe7[848]<=ipf8bcc[0];mec1fe7[834]<=dz4f587[0];mec1fe7[816]<=gd1d1ab[0];mec1fe7[803]<=vx6dc8[0];mec1fe7[793]<=ux9a963[0];mec1fe7[777]<=vi5d815[0];mec1fe7[775]<=lf3823a;mec1fe7[765]<=gqb9aad[0];mec1fe7[742]<=ba968cd;mec1fe7[732]<=qv70e0;mec1fe7[697]<=yzb123e;mec1fe7[661]<=cof116[0];mec1fe7[650]<=kd5b751[0];mec1fe7[643]<=gbccad3[0];mec1fe7[628]<=dm57b0f;mec1fe7[621]<=zma814a[0];mec1fe7[599]<=qgc4589;mec1fe7[593]<=zkf1e5b[0];mec1fe7[575]<=blc8d18[0];mec1fe7[565]<=baad6a1;mec1fe7[553]<=bldd461[0];mec1fe7[528]<=jrb0fe4[0];mec1fe7[527]<=qgd4538;mec1fe7[514]<=ph385d6[0];mec1fe7[497]<=rt45012;mec1fe7[466]<=xj61edf[0];mec1fe7[450]<=zzb0ad4;mec1fe7[437]<=aa529f[0];mec1fe7[431]<=wwd42f7;mec1fe7[417]<=zz9eb0[0];mec1fe7[408]<=lq63a35[0];mec1fe7[401]<=kqe0db9[0];mec1fe7[388]<=gdabb02[0];mec1fe7[387]<=zma7047;mec1fe7[366]<=qge0e1c;mec1fe7[348]<=fp16247;mec1fe7[330]<=vv61e22[0];mec1fe7[325]<=aycb6ea[0];mec1fe7[314]<=hdaaf61;mec1fe7[310]<=ng35029[0];mec1fe7[287]<=gqb91a3[0];mec1fe7[282]<=qgf5ad4;mec1fe7[257]<=tj270ba[0];mec1fe7[248]<=jea8a02;mec1fe7[225]<=shd615a;mec1fe7[215]<=rt5a85e;mec1fe7[208]<=goc13d6;mec1fe7[204]<=ir2c746[0];mec1fe7[193]<=th74e08;mec1fe7[183]<=sj3c1c3;mec1fe7[165]<=fc8c3c4[0];mec1fe7[157]<=mg155ec;mec1fe7[155]<=yzb4d40[0];mec1fe7[141]<=sjbeb5a;mec1fe7[128]<=rtfc9c2[0];mec1fe7[124]<=ls35140;mec1fe7[112]<=fc3ac2b;mec1fe7[104]<=hd3827a;mec1fe7[96]<=icce9c1;mec1fe7[91]<=twa7838;mec1fe7[78]<=ir2abd;mec1fe7[77]<=qib69a8[0];mec1fe7[64]<=vk3f938[0];mec1fe7[62]<=yk46a28;mec1fe7[56]<=ne47585;mec1fe7[38]<=mgb6d35[0];mec1fe7[19]<=ald6da6[0];mec1fe7[9]<=oh175b6[0];end         assign pse4f7d = mec1fe7,wyff39 = rv3df57; initial begin nrf905f = $fopen(".fred"); $fdisplay( nrf905f, "%3h\n%3h", (wje7227 >> 4) & zz2793d, (wje7227 >> (xjc89e4+4)) & zz2793d ); $fclose(nrf905f); $readmemh(".fred", qg7d5f9); end always @ (pse4f7d) begin zk57e41 = qg7d5f9[1]; for (fnc82fe=0; fnc82fe<al7f9c8; fnc82fe=fnc82fe+1) begin rv3df57[fnc82fe] = pse4f7d[zk57e41]; hdbf20b = ^(zk57e41 & qg7d5f9[0]); zk57e41 = {zk57e41, hdbf20b}; end end 
endmodule

